# -*- mode: ruby -*-
# vi: set ft=ruby :
#
#
# Vagrant Configuratie voor Oracle Virtualbox en VMware Workstation/Fusion PRO hypervisors
# (C) Copyright 2023 JA Tutert
# 
# This configuration may only be used for private use or education use. Business/commercial use is prohibited. 
# It is intended for use with virtual machines on a hypervisor and thus not for configuration of bare-metal or cloud machines. 
#
# Vagrant is copyrighted by Hashicorp (www.vagrantup.com)
#
#
# Versie: 3.6.4
# Build 20230810
#
# Changes: 
# - ssh username / password vgu2204
# - Kubernetes install script 
# - VMware Windows 10/11 gezamenlijke definitie 
#
#
#
#
#
# ###############################################################################
# Versie 4.0 Alpha
#
#
# 
#
#
#
#
 servers=[
      {
        :hostname => "tst2204S",
        :ip => "192.168.100.10",
        :box => "generic/ubuntu2204",
        :ram => 2048,
        :cpu => 2
      },
      {
        :hostname => "tst2204M",
        :ip => "192.168.100.11",
        :box => "generic/ubuntu2204",
        :ram => 4096,
        :cpu => 2
      },
	  {
       :hostname => "tst2204L",
       :ip => "192.168.100.11",
       :box => "generic/ubuntu2204",
       :ram => 8192,
       :cpu => 2
      }
    ]
#
#
#
#
#
# ###############################################################################
#
#
#
#
#
# ############################################ [Declaratie Scripts] ##########################################
#
#
# [1] LINUX
#
#
# [1a] Configuratie Scripts. 
#
#
# [1a-1] Datapacket Repo
#
#
$datapacket_repo = <<SCRIPT
	#!/bin/bash
	#
	# Reposity Nederland Datapacket toevoegen aan /etc/apt/sources.list bestand binnen Ubuntu Linux.   
	#
	sudo add-apt-repository "deb http://mirror.nl.datapacket.com/ubuntu $(lsb_release -sc) universe"
	#
	# [Vervangen standaard (mirros.edge.kernel.org) door nl.archive.ubuntu.com 
	# [OPTIE] echo "sudo sed 's@mirrors.edge.kernel.org@nl.archive.ubuntu.com@' -i /etc/apt/sources.list" >> /directory/file
	# [OPTIE] sudo sed 's@mirrors.edge.kernel.org@mirror.nl.datapacket.com@' -i /etc/apt/sources.list
	#
	sudo apt-get update
	#
SCRIPT
#
#
# [1a-2] Docker Repo
#
#
$docker_repo = <<SCRIPT
	#!/bin/bash
	#
	# Repository toevoegen, zodat DOCKER-CE vervolgens geïnstalleerd kan worden m.b.t. commando binnen shell of via script. 
	#
	sudo apt-get install -y ca-certificates curl gnupg
	sudo install -m 0755 -d /etc/apt/keyrings
	curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
	sudo chmod a+r /etc/apt/keyrings/docker.gpg
	echo "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
SCRIPT
#
#
# [1a-3] Ubuntu repo
#
#
$ubuntu_repo = <<SCRIPT
	#
	# Aanmaken ubuntu_repo Script 
	#
	#!/bin/bash
	echo '#!/bin/bash' 													 > /home/vagrant/ubuntu_repo.sh
	echo '#' 															>> /home/vagrant/ubuntu_repo.sh
	echo '# Ubuntu Reposiory nl.archive.ubuntu.com' 					>> /home/vagrant/ubuntu_repo.sh
	echo '# (c) 2023 John Tutert' 										>> /home/vagrant/ubuntu_repo.sh
	echo '#' 															>> /home/vagrant/ubuntu_repo.sh
	echo '# Aanpassen sources.list' 									>> /home/vagrant/ubuntu_repo.sh
	echo "sudo sed 's@mirrors.edge.kernel.org@nl.archive.ubuntu.com@' -i /etc/apt/sources.list" >> /home/vagrant/ubuntu_repo.sh
	echo '# APT bijwerken' 												>> /home/vagrant/ubuntu_repo.sh
	echo sudo apt update -qq -y 										>> /home/vagrant/ubuntu_repo.sh
	chmod +x /home/vagrant/ubuntu_repo.sh
SCRIPT
#
#
# [1a-4] Docker rechten
#
#
$docker_rechten = <<SCRIPT
	#
	# Aanmaken docker_rechten Script
	#
	#!/bin/bash
	echo '#!/bin/bash' > /home/vagrant/docker-rechten.sh
	echo '#' >> /home/vagrant/docker-rechten.sh
	echo '# Docker Rechten Configuratie' >> /home/vagrant/docker-rechten.sh
	echo '# (c) 2023 John Tutert' >> /home/vagrant/docker-rechten.sh
	echo '#' >> /home/vagrant/docker-rechten.sh
	# 
	# ################################################################################################################
	#
	# usermod (https://linuxize.com/post/usermod-command-in-linux/) 
	#
	# sudo usermod -g GROUP USER
	# To change a user’s primary group, invoke the usermod command with by the -g option followed the group’s name and the username:
	#
	# usermod -a -G GROUP USER
	# To add an existing user to a secondary group, use the -a -G options followed the group’s name and the username
	#
	#
	#
	#
	# C:\HashiCorp\Vagrant\embedded\gems\gems\vagrant-2.3.7\plugins\provisioners\docker\cap\linux\docker_configure_vagrant_user.rb
	# Commando in dit bestand: sudo usermod -a -G docker 
	# 
	# ################################################################################################################
	#
	#
	# Bestaande gebruiker Vagrant toevoegen aan een Secondary Group
	echo sudo usermod -a -G docker vagrant >> /home/vagrant/docker-rechten.sh
	#
	#
	echo '# Melding' >> /home/vagrant/docker-rechten.sh
	echo echo Doe eventueel een reboot via shutdown -r now of logout om rechten actief te maken >> /home/vagrant/docker-rechten.sh
	#
	chmod +x /home/vagrant/docker-rechten.sh
SCRIPT
#
#
# [1b] Installatie scripts 
#
#
# [1b-1] Ubuntu upgrade script
#
#
$ubuntu_upgrade = <<SCRIPT
	#
	# Aanmaken ubuntu_upgrade Script 
	#
	#!/bin/bash
	echo '#!/bin/bash'                        > /home/vagrant/ubuntu_upgrade.sh
	echo '#'                                 >> /home/vagrant/ubuntu_upgrade.sh
	echo '# Ubuntu UPGRADE'                  >> /home/vagrant/ubuntu_upgrade.sh
	echo '# (c) 2023 John Tutert'            >> /home/vagrant/ubuntu_upgrade.sh
	echo '#'                                 >> /home/vagrant/ubuntu_upgrade.sh
	echo '# Package Manager updaten'         >> /home/vagrant/ubuntu_upgrade.sh
	echo sudo apt update -qq -y              >> /home/vagrant/ubuntu_upgrade.sh
	echo '# Ubuntu upgraden'                 >> /home/vagrant/ubuntu_upgrade.sh
	echo sudo apt upgrade -y                 >> /home/vagrant/ubuntu_upgrade.sh
	echo sudo apt autoremove -qq -y          >> /home/vagrant/ubuntu_upgrade.sh
	chmod +x /home/vagrant/ubuntu_upgrade.sh
SCRIPT
#
#
# [1b-2] Ubuntu_Utils
#
#
# Midnight Commander (MC en MCedit) 
# Screenfetch
# Open-VM-Tools (VMware Tools) 
# WGet
#
#
$ubuntu_utils_install = <<SCRIPT
#
# Aanmaken ubuntu_config Script 
#
#!/bin/bash
echo '#!/bin/bash'                        > /home/vagrant/ubuntu_utils_install.sh
echo '#'                                 >> /home/vagrant/ubuntu_utils_install.sh
echo '# Ubuntu Installatie Utils'        >> /home/vagrant/ubuntu_utils_install.sh
echo '# (c) 2023 John Tutert'            >> /home/vagrant/ubuntu_utils_install.sh
echo '#'                                 >> /home/vagrant/ubuntu_utils_install.sh
echo '# Midnight Commander'              >> /home/vagrant/ubuntu_utils_install.sh
echo sudo apt install -y mc              >> /home/vagrant/ubuntu_utils_install.sh
echo '# Screenfetch'                     >> /home/vagrant/ubuntu_utils_install.sh
echo sudo apt install -y screenfetch     >> /home/vagrant/ubuntu_utils_install.sh
echo '# Open-VM-Tools'                   >> /home/vagrant/ubuntu_utils_install.sh
echo sudo apt install -y open-vm-tools   >> /home/vagrant/ubuntu_utils_install.sh
echo '# WGet'                            >> /home/vagrant/ubuntu_utils_install.sh
echo sudo apt install -y wget            >> /home/vagrant/ubuntu_utils_install.sh
# echo sudo apt install -y mc screenfetch open-vm-tools wget >> /home/vagrant/ubuntu_utils_install.sh
chmod +x /home/vagrant/ubuntu_utils_install.sh
SCRIPT
#
#
# [1b-3] Docker_installatie [alleen voor Ubuntu 22.10]
#
#
$docker_installatie = <<SCRIPT
#
# Aanmaken docker_installatie Script
#
#!/bin/bash
echo '#!/bin/bash'                        	 	    	 > /home/vagrant/docker_installatie.sh
echo '#'                                 				>> /home/vagrant/docker_installatie.sh
echo '# Vagrant Docker-CE Installatie'   				>> /home/vagrant/docker_installatie.sh
echo '# (c) 2023 John Tutert'            				>> /home/vagrant/docker_installatie.sh
echo '#'                                 				>> /home/vagrant/docker_installatie.sh
echo sudo apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin >> /home/vagrant/docker_installatie.sh
echo '#'                                 				>> /home/vagrant/docker_installatie.sh
echo '# Gebruiker Vagrant toevoegen aan groep docker' 	>> /home/vagrant/docker_installatie.sh
echo sudo usermod -a -G docker vagrant 					>> /home/vagrant/docker_installatie.sh
chmod +x /home/vagrant/docker_installatie.sh
SCRIPT
#
#
# [1b-4] Docker_install [HashiCorp Vagrant] 
#
# C:\HashiCorp\Vagrant\embedded\gems\gems\vagrant-2.3.7\plugins\provisioners\docker\cap\debian\docker_install.rb
#
#
$docker_hashicorp_install = <<SCRIPT
#
# Aanmaken docker_installatie Script
#
#!/bin/bash
echo '#!/bin/bash'                        	 	    				 > /home/vagrant/docker_hashicorp_install.sh
echo '#'                                 							>> /home/vagrant/docker_hashicorp_install.sh
echo '# Vagrant Docker-CE Installatie'   							>> /home/vagrant/docker_hashicorp_install.sh
echo '# HashiCorp'            										>> /home/vagrant/docker_hashicorp_install.sh
echo '#'                                 							>> /home/vagrant/docker_hashicorp_install.sh
echo apt-get update -qq -y 											>> /home/vagrant/docker_hashicorp_install.sh
echo apt-get install -qq -y --force-yes curl apt-transport-https 	>> /home/vagrant/docker_hashicorp_install.sh
echo apt-get purge -qq -y lxc-docker* || true 						>> /home/vagrant/docker_hashicorp_install.sh
echo curl -sSL https://get.docker.com/ | sh 						>> /home/vagrant/docker_hashicorp_install.sh
echo service docker start											>> /home/vagrant/docker_hashicorp_install.sh
echo '#'                                 							>> /home/vagrant/docker_hashicorp_install.sh
echo sudo usermod -a -G docker vagrant 								>> /home/vagrant/docker_hashicorp_install.sh
chmod +x /home/vagrant/docker_hashicorp_install.sh
SCRIPT
#
#
# [1b-5] Minikube_installatie (Kubernetes) 
#
#
$minikube_installatie = <<SCRIPT
#
# Aanmaken minikube installatie Script
# Provider = Docker 
#
#!/bin/bash
echo '#!/bin/bash'                            > /home/vagrant/minikube_installatie.sh
echo '#'                                     >> /home/vagrant/minikube_installatie.sh
echo '# Installatie Minikube'                >> /home/vagrant/minikube_installatie.sh
echo '# (c) 2023 John Tutert'                >> /home/vagrant/minikube_installatie.sh
echo '#'                                     >> /home/vagrant/minikube_installatie.sh
echo wget https://storage.googleapis.com/minikube/releases/latest/minikube_latest_amd64.deb >> /home/vagrant/minikube_installatie.sh
echo sudo dpkg -i minikube_latest_amd64.deb  >> /home/vagrant/minikube_installatie.sh
# Minikube Driver Docker = Default
echo minikube config set driver docker       >> /home/vagrant/minikube_installatie.sh
# Installatie kubectl
echo sudo snap install kubectl --classic     >> /home/vagrant/minikube_installatie.sh
chmod +x /home/vagrant/minikube_installatie.sh
SCRIPT
#
#
# [1b-6] minio_installatie [native install minio / niet voor minikube of kubernetes ] 
#
#
$minio_installatie = <<SCRIPT
#
# Installatie MinIO script
# Niet gebruiken voor Kubernetes
#
#!/bin/bash
echo '#!/bin/bash'                                    > /home/vagrant/minio-installatie.sh
echo '#'                                             >> /home/vagrant/minio-installatie.sh
echo '# MinIO Native Installatie'                    >> /home/vagrant/minio-installatie.sh
echo '# (c) 2023 John Tutert'                        >> /home/vagrant/minio-installatie.sh
echo '#'                                             >> /home/vagrant/minio-installatie.sh
echo '# Toevoegen Repository'                        >> /home/vagrant/minio-installatie.sh
# [MinIO Server Installatie]
echo wget https://dl.min.io/server/minio/release/linux-amd64/minio_20230718174940.0.0_amd64.deb >> /home/vagrant/minio-installatie.sh
echo sudo dpkg -i minio_20230718174940.0.0_amd64.deb >> /home/vagrant/minio-installatie.sh
# [MinIO Groepen/Gebruikers]
echo sudo groupadd -r minio-user                     >> /home/vagrant/minio-installatie.sh
echo sudo useradd -M -r -g minio-user minio-user     >> /home/vagrant/minio-installatie.sh
# [MinIO Storage Folder]
echo sudo mkdir /mnt/data                            >> /home/vagrant/minio-installatie.sh
echo sudo chown minio-user:minio-user /mnt/data      >> /home/vagrant/minio-installatie.sh
# [MinIO Configuratie]
echo 'echo MINIO_VOLUMES="/mnt/data" >> /etc/default/minio' 		>> /home/vagrant/minio-installatie.sh
echo 'echo MINIO_OPTS="--certs-dir /home/vagrant/.minio/certs --console-address :9001" >> /etc/default/minio' >> /home/vagrant/minio-installatie.sh
echo 'echo MINIO_ROOT_USER=minioadmin >> /etc/default/minio' 		>> /home/vagrant/minio-installatie.sh
echo 'echo MINIO_ROOT_PASSWORD=minioadmin >> /etc/default/minio' 	>> /home/vagrant/minio-installatie.sh
# [MinIO UFW poorten openzetten]
echo sudo ufw allow 9000:9001/tcp                    				>> /home/vagrant/minio-installatie.sh
# [Starten MinIO Server]
echo sudo systemctl start minio                      				>> /home/vagrant/minio-installatie.sh
echo sudo systemctl enable minio                     				>> /home/vagrant/minio-installatie.sh
# [MinIO Client Installatie]
echo wget https://dl.min.io/client/mc/release/linux-amd64/mcli_20230718210538.0.0_amd64.deb >> /home/vagrant/minio-installatie.sh
echo sudo dpkg -i mcli_20230718210538.0.0_amd64.deb  				>> /home/vagrant/minio-installatie.sh
# [KubeCTL MinIO Plugin]
# https://min.io/docs/minio/kubernetes/upstream/reference/kubectl-minio-plugin.html
# https://www.origo.io/info/stabiledocs/guides/minio-object-storage-service/
echo wget https://github.com/minio/operator/releases/download/v5.0.6/kubectl-minio_5.0.6_linux_amd64 -O kubectl-minio >> /home/vagrant/minio-installatie.sh
echo chmod +x kubectl-minio >> /home/vagrant/minio-installatie.sh
echo sudo mv kubectl-minio /usr/local/bin/ >> /home/vagrant/minio-installatie.sh
#
# https://www.olivercoding.com/2021-03-01-kubernetes-minio-init/
# 
# echo kubectl create namespace minio-operator       				>> /home/vagrant/minio-installatie.sh
# echo kubectl minio init --namespace minio-operator 				>> /home/vagrant/minio-installatie.sh
#
chmod +x /home/vagrant/minio-installatie.sh
SCRIPT
#
#
# [1b-7] ansible_installatie 
#
#
$ansible_installatie = <<SCRIPT
#
# Aanmaken Ansible installatie Script
#
#!/bin/bash
echo '#!/bin/bash' 									 > /home/vagrant/Ansible-installatie.sh
echo '#' 											>> /home/vagrant/Ansible-installatie.sh
echo '# ANSIBLE Installatie' 						>> /home/vagrant/Ansible-installatie.sh
echo '# (c) 2023 John Tutert' 						>> /home/vagrant/Ansible-installatie.sh
echo '#' 											>> /home/vagrant/Ansible-installatie.sh
echo '# Toevoegen Repository' 						>> /home/vagrant/Ansible-installatie.sh
echo sudo apt-add-repository ppa:ansible/ansible 	>> /home/vagrant/Ansible-installatie.sh
echo '# Bijwerken Repository' 						>> /home/vagrant/Ansible-installatie.sh
echo sudo apt update 								>> /home/vagrant/Ansible-installatie.sh
echo '# Ansible Install' 							>> /home/vagrant/Ansible-installatie.sh
echo sudo apt install -y ansible 					>> /home/vagrant/Ansible-installatie.sh
chmod +x /home/vagrant/Ansible-installatie.sh
SCRIPT
#
#
# [1b-8] Kubernetes_installatie 
#
#
$kubernetes_installatie = <<SCRIPT
#
# Aanmaken Kubernetes installatie Script
# https://www.nakivo.com/blog/install-kubernetes-ubuntu/
#
#!/bin/bash
#
# swap
#
sudo swapoff -a
sudo sed -i ‘/ swap / s/^\(.*\)$/#\1/g’ /etc/fstab
sudo echo “vm.swappiness=0” | sudo tee –append /etc/sysctl.conf
sudo sysctl -p
#
# Installatie
#
echo ‘deb http://apt.kubernetes.io/ kubernetes-xenial main’ | sudo tee /etc/apt/sources.list.d/kubernetes.list
sudo apt-get update
sudo apt-get install -y kubelet kubeadm kubectl
#
#
#
sudo apt-get install keepalived
sudo systemctl enable keepalived && systemctl start keepalived
# kubeadm init –pod-network-cidr=10.244.0.0/16 –apiserver-advertise-address=192.168.101.21
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config
kubectl get nodes
# chmod +x /home/vagrant/kubernetes_installatie.sh
SCRIPT
#
#
# [1d] Applicatie Scripts 
#
# [1d-1] Minio_docker [Minio als Docker containers] 
#
# https://blog.knoldus.com/how-to-run-minio-as-a-docker-container/
#
$minio_docker = <<SCRIPT
	#!/bin/bash
	echo '#!/bin/bash' 								 > /home/vagrant/minio-docker-run.sh
	echo '#' 										>> /home/vagrant/minio-docker-run.sh
	echo '# Minio Object Storage on Docker' 		>> /home/vagrant/minio-docker-run.sh
	echo 'docker run -d -p 9000:9000 -p 9001:9001 -e "MINIO_ROOT_USER=minio99" -e "MINIO_ROOT_PASSWORD=minio123" quay.io/minio/minio server /data --console-address ":9001"' >/home/vagrant/minio-docker-run.sh
	chmod +x /home/vagrant/minio-docker-run.sh
SCRIPT
#
#
# [2] WINDOWS
#
# [2a] Scripts die ALTIJD uitgevoerd worden bij eerste start van VM
#
#
# [2a-1] Installatie WinGET
#
#
$winget_installatie = <<SCRIPT
	# REM powershell -ExecutionPolicy Unrestricted 
	# REM powershell -file ps-winget.ps1
SCRIPT
#
# [2b] Scripts die aangemaakt worden, maar later handmatig gestart moeten worden
#
$win_script_aanmaak = <<SCRIPT
	# REM powershell -ExecutionPolicy Unrestricted 
	# REM powershell -file ps-winget.ps1
SCRIPT
#
#
#
#
# ########################################## [BOXES] ######################################################
#
#
#
#
# LEGENDA
# 
# v = VMware provider
# o = Oracle provider
# g = generic
# gr = gusztavvargadr
# m = maroskukan
# u = Ubuntu
# S/L/M = RAM
#
#
#
# VOLGORDE
#
# [1] VMware Workstation / Fusion PRO
# [2] Oracle Virtualbox
#
#
#
#
Vagrant.configure("2") do |config|
	# 
	# #####################################  VMware Workstation/Fusion PRO BOXES #######################################
	#
	#
	# ####################################
	#              UBUNTU
	# ####################################
	#
	#
	# ----------------------------------------
	# gusztavvargadr Ubuntu Server 20.04.x LTS
	# ----------------------------------------
	#
	#
	# ====================================================================================
	# [vgru2004L] gusztavvargadr Ubuntu Server 20.04 LTS met 8GB RAM
	# 
	# 2023juli29 Foutmelding bij starten VM (oorzaak: onbekend) 
	# 
	# ====================================================================================  
	#
	#
	config.vm.define "vgru2004L" do |vgru2004L|
		vgru2004L.vm.box = "gusztavvargadr/ubuntu-server"
		vgru2004L.vm.box_check_update = true
		vgru2004L.vm.hostname = "Vagrant-vgru2004L"
		vgru2004L.vm.network "private_network", type: "dhcp"
		# https://developer.hashicorp.com/vagrant/docs/synced-folders/basic_usage
		vgru2004L.vm.synced_folder "C://Users//#{ENV['USERNAME']}", "/home/#{ENV['USERNAME']}"
		vgru2004L.vm.synced_folder "#{ENV['USERPROFILE']}//Downloads", "/home/vagrant/downloads"
		vgru2004L.vm.synced_folder "#{ENV['USERPROFILE']}//Documents", "/home/vagrant/documents"
		# vgru2004L.vm.synced_folder "#{ENV['USERPROFILE']}//Downloads", "/mnt/hgfs"
		# https://developer.hashicorp.com/vagrant/docs/providers/vmware
		vgru2004L.vm.provider "vmware_desktop" do |vmw|
			#
			vmw.gui = true
			vmw.linked_clone = false
			#
			vmw.cpus = "2"
			vmw.memory = "8192"
			#
			vmw.vmx["tools.syncTime"] = "TRUE"
			vmw.vmx["displayName"] = "Vagrant-vgru2004L"
			vmw.vmx["annotation"] = "Ubuntu Server 20.04 LTS |0D|0A |0D|0AUsername/Password = vagrant"
			#
		end 
		vgru2004L.vm.provision "shell", inline: <<-SHELL
			# ===========================================================================================================   
			# Dit gedeelte wordt alleen uitgevoerd bij eerste start VM OF bij Provision parameter 
			# ===========================================================================================================
			#
			#
			#
			# 
		SHELL
		vgru2004L.vm.provision "shell", inline: $ubuntu_repo
		vgru2004L.vm.provision "shell", inline: $ubuntu_upgrade
		vgru2004L.vm.provision "shell", inline: $ubuntu_utils_install
	end 
	#	
	#	
	# Generic boxes
	# =============
	#
	#
	# Generic Ubuntu 20.04.0x LTS
	#
	# Released: 	23 April 2020
	# Supported: 	April 2025
	#
	# https://wiki.ubuntu.com/Releases
	# --------------------------------
	#
	#
	# ====================================================================================
	# [vgu2004S] Generic Ubuntu 20.04.0x LTS met 2GB RAM (Small)
	# ====================================================================================
	#
	#
	config.vm.define "vgu2004S" do |vgu2004S|
		#
		vgu2004S.vm.box = "generic/ubuntu2004"
		vgu2004S.vm.box_check_update = true
		vgu2004S.vm.hostname = "Vagrant-vgu2004S"
		#
		# ####################################################################	
		# Adapter 2 Host-Only	
		vgu2004S.vm.network "private_network", type: "dhcp"
		# Adapter 3 Bridged
		# vgu2004S.vm.network "public_network", bridge: "VMware Virtual Ethernet Adapter for VMnet8"
		# vgu2004S.vm.network "public_network", bridge: "Ethernet"
		# ####################################################################
		#	
		# ####################################################################		
		# https://developer.hashicorp.com/vagrant/docs/synced-folders/basic_usage
		vgu2004S.vm.synced_folder "C://Users//#{ENV['USERNAME']}", "/home/#{ENV['USERNAME']}"
		vgu2004S.vm.synced_folder "#{ENV['USERPROFILE']}//Downloads", "/home/vagrant/downloads"
		vgu2004S.vm.synced_folder "#{ENV['USERPROFILE']}//Documents", "/home/vagrant/documents"
		# 2204M.vm.synced_folder "#{ENV['USERPROFILE']}//Downloads", "/mnt/hgfs"
		# ####################################################################		
		#
		vgu2004S.vm.post_up_message = "Start scripts in /home/vagrant voor verdere configuratie"
		#
		#
		# Installatie Docker-CE en Compose plugin
		# Eventueel pull images
		#
		# https://developer.hashicorp.com/vagrant/docs/provisioning/docker
		#
		# C:\HashiCorp\Vagrant\embedded\gems\gems\vagrant-2.3.7\plugins\provisioners\docker\cap\debian
		#
		# vgu2004S.vm.provision "docker" do |d|
		#	d.pull_images "hello-world"				# 	13.3 KB
		#	d.pull_images "alpine"					# 	7.33 MB
		#	d.pull_images "debian"					#	116 MB
		#	d.pull_images "registry"				# 	24 MB
		#	# d.pull_images "odoo"					#	1.68 GB
		#	d.pull_images "quay.io/minio/minio"		#	277 MB
		# end
		#
		# Installatie Ansible + uitvoeren playbook.yml
		#
		# vvgu2004M.vm.provision "ansible_local" do |ansible|
		#	ansible.playbook = "playbook.yml"
		# end
		#
		# https://developer.hashicorp.com/vagrant/docs/providers/vmware
		vgu2004S.vm.provider "vmware_desktop" do |vgu2004ssettings|
			#
			vgu2004ssettings.gui = true
			vgu2004ssettings.linked_clone = false
			#
			vgu2004ssettings.cpus = "2"
			vgu2004ssettings.memory = "2048"
			# vgu2210msettings.nat_device = "VMnet8"
			#		
			vgu2004ssettings.vmx["tools.syncTime"] = "TRUE"
			vgu2004ssettings.vmx["displayName"] = "Vagrant-vgu2004S"
			vgu2004ssettings.vmx["annotation"] = "Ubuntu 20.04.0x LTS Small|0D|0A |0D|0AUsername/Password = vagrant"
			#
			# == NAT naar VMnet8 via VMX
			# vmw.vmx["ethernet0.present"] = "TRUE"
			# vmw.vmx["ethernet0.vnet"] = "VMnet8"
			# vmw.vmx["ethernet0.displayName"] = "VMnet8"
			# vmw.vmx["ethernet0.connectionType"] = "custom"
			# vmw.vmx["ethernet0.virtualDev"] = "e1000"
			#
			# == Shared Folders via VMX
			# vmw.vmx["sharedFolder0.present"] = "TRUE"	 
			# vmw.vmx["sharedFolder0.enabled"] = "TRUE"
			# vmw.vmx["sharedFolder0.readAccess"] = "TRUE"
			# vmw.vmx["sharedFolder0.writeAccess"] = "TRUE"
			# vmw.vmx["sharedFolder0.hostPath"] = "C://Users"
			# vmw.vmx["sharedFolder0.guestName"] = "Users"
			# vmw.vmx["sharedFolder0.expiration"] = "never"
			# vmw.vmx["sharedFolder.maxNum"] = "1"
		end 
		# Scripts die bij eerste start of provision parameter worden uitgevoerd
		vgu2004S.vm.provision "shell", inline: <<-SHELL
			#
			#
			#
			#
		SHELL
		vgu2004S.vm.provision "shell", inline: $ubuntu_repo
		vgu2004S.vm.provision "shell", inline: $ubuntu_upgrade
		vgu2004S.vm.provision "shell", inline: $ubuntu_utils_install
		# Scripts die bij IEDERE start van de VM worden uitgevoerd
		vgu2004S.vm.provision "shell", run: "always", inline: <<-SHELL
			#
			# bijvoorbeeld sudo systemctl start nginx
			#
			#
		SHELL
		vgu2004S.vm.provision "shell", run: "always", inline: $ubuntu_repo
		vgu2004S.vm.provision "shell", run: "always", inline: $ubuntu_upgrade  
		vgu2004S.vm.provision "shell", run: "always", inline: $ubuntu_utils_install
	end 
	#
	#
	# ====================================================================================
	# [vgu2004M] Generic Ubuntu 20.04.0x LTS met 4GB RAM (Medium)
	# ====================================================================================
	#
	#
	config.vm.define "vgu2004M" do |vgu2004M|
		#
		vgu2004M.vm.box = "generic/ubuntu2004"
		vgu2004M.vm.box_check_update = true
		vgu2004M.vm.hostname = "Vagrant-vgu2004M"
		#
		# ####################################################################	
		# Adapter 2 Host-Only	
		vgu2004M.vm.network "private_network", type: "dhcp"
		# Adapter 3 Bridged
		# vgu2004M.vm.network "public_network", bridge: "VMware Virtual Ethernet Adapter for VMnet8"
		# vgu2004M.vm.network "public_network", bridge: "Ethernet"
		# ####################################################################
		#	
		# ####################################################################		
		# https://developer.hashicorp.com/vagrant/docs/synced-folders/basic_usage
		vgu2004M.vm.synced_folder "C://Users//#{ENV['USERNAME']}", "/home/#{ENV['USERNAME']}"
		vgu2004M.vm.synced_folder "#{ENV['USERPROFILE']}//Downloads", "/home/vagrant/downloads"
		vgu2004M.vm.synced_folder "#{ENV['USERPROFILE']}//Documents", "/home/vagrant/documents"
		# 2204M.vm.synced_folder "#{ENV['USERPROFILE']}//Downloads", "/mnt/hgfs"
		# ####################################################################		
		#
		vgu2004M.vm.post_up_message = "Start scripts in /home/vagrant voor verdere configuratie"
		#
		#
		# Installatie Docker-CE en Compose plugin
		# Eventueel pull images
		#
		# https://developer.hashicorp.com/vagrant/docs/provisioning/docker
		#
		# C:\HashiCorp\Vagrant\embedded\gems\gems\vagrant-2.3.7\plugins\provisioners\docker\cap\debian
		#
		# vgu2004M.vm.provision "docker" do |d|
		#	d.pull_images "hello-world"				# 	13.3 KB
		#	d.pull_images "alpine"					# 	7.33 MB
		#	d.pull_images "debian"					#	116 MB
		#	d.pull_images "registry"				# 	24 MB
		#	# d.pull_images "odoo"					#	1.68 GB
		#	d.pull_images "quay.io/minio/minio"		#	277 MB
		# end
		#
		# Installatie Ansible + uitvoeren playbook.yml
		#
		# vvgu2004M.vm.provision "ansible_local" do |ansible|
		#	ansible.playbook = "playbook.yml"
		# end
		#
		# https://developer.hashicorp.com/vagrant/docs/providers/vmware
		vgu2004M.vm.provider "vmware_desktop" do |vgu2004msettings|
			#
			vgu2004msettings.gui = true
			vgu2004msettings.linked_clone = false
			#
			vgu2004msettings.cpus = "2"
			vgu2004msettings.memory = "4096"
			# vgu2210msettings.nat_device = "VMnet8"
			#		
			vgu2004msettings.vmx["tools.syncTime"] = "TRUE"
			vgu2004msettings.vmx["displayName"] = "Vagrant-vgu2004M"
			vgu2004msettings.vmx["annotation"] = "Ubuntu 20.04.0x LTS Medium|0D|0A |0D|0ADocker-CE|0D|0A |0D|0AUsername/Password = vagrant"
			#
			# == NAT naar VMnet8 via VMX
			# vmw.vmx["ethernet0.present"] = "TRUE"
			# vmw.vmx["ethernet0.vnet"] = "VMnet8"
			# vmw.vmx["ethernet0.displayName"] = "VMnet8"
			# vmw.vmx["ethernet0.connectionType"] = "custom"
			# vmw.vmx["ethernet0.virtualDev"] = "e1000"
			#
			# == Shared Folders via VMX
			# vmw.vmx["sharedFolder0.present"] = "TRUE"	 
			# vmw.vmx["sharedFolder0.enabled"] = "TRUE"
			# vmw.vmx["sharedFolder0.readAccess"] = "TRUE"
			# vmw.vmx["sharedFolder0.writeAccess"] = "TRUE"
			# vmw.vmx["sharedFolder0.hostPath"] = "C://Users"
			# vmw.vmx["sharedFolder0.guestName"] = "Users"
			# vmw.vmx["sharedFolder0.expiration"] = "never"
			# vmw.vmx["sharedFolder.maxNum"] = "1"
		end 
		# Scripts die bij eerste start of provision parameter worden uitgevoerd
		vgu2004M.vm.provision "shell", inline: <<-SHELL
			#
			#
			wget https://raw.githubusercontent.com/msiekmans/linux-server-scripts/main/install-mysqlserver.sh
			wget https://raw.githubusercontent.com/msiekmans/linux-server-scripts/main/install-webserver.sh
			#
			#
		SHELL
		vgu2004M.vm.provision "shell", inline: $ubuntu_repo
		vgu2004M.vm.provision "shell", inline: $ubuntu_upgrade
		vgu2004M.vm.provision "shell", inline: $ubuntu_utils_install
		vgu2004M.vm.provision "shell", inline: $minikube_installatie
		vgu2004M.vm.provision "shell", inline: $minio_docker
		vgu2004M.vm.provision "shell", inline: $ansible_installatie
		# Scripts die bij IEDERE start van de VM worden uitgevoerd
		vgu2004M.vm.provision "shell", run: "always", inline: <<-SHELL
			#
			# bijvoorbeeld sudo systemctl start nginx
			#
			#
		SHELL
		vgu2004M.vm.provision "shell", run: "always", inline: $ubuntu_repo
		vgu2004M.vm.provision "shell", run: "always", inline: $ubuntu_upgrade  
		vgu2004M.vm.provision "shell", run: "always", inline: $ubuntu_utils_install
	end 
	#
	#
	# ====================================================================================
	# [vgu2004L] Generic Ubuntu 22.04.02 LTS met 8GB RAM (LARGE)
	# ====================================================================================
	#
	#
	#
	config.vm.define "vgu2004L" do |vgu2004L|
		#
		vgu2004L.vm.box = "generic/ubuntu2204"
		vgu2004L.vm.box_check_update = true
		vgu2004L.vm.hostname = "Vagrant-vgu2004L"
		#
		# ####################################################################	
		# Adapter 2 Host-Only	
		vgu2004L.vm.network "private_network", type: "dhcp"
		# Adapter 3 Bridged
		# vgu2004L.vm.network "public_network", bridge: "VMware Virtual Ethernet Adapter for VMnet8"
		# vgu2004L.vm.network "public_network", bridge: "Ethernet"
		# ####################################################################
		#	
		# ####################################################################		
		# https://developer.hashicorp.com/vagrant/docs/synced-folders/basic_usage
		vgu2004L.vm.synced_folder "C://Users//#{ENV['USERNAME']}", "/home/#{ENV['USERNAME']}"
		vgu2004L.vm.synced_folder "#{ENV['USERPROFILE']}//Downloads", "/home/vagrant/downloads"
		vgu2004L.vm.synced_folder "#{ENV['USERPROFILE']}//Documents", "/home/vagrant/documents"
		# 2204M.vm.synced_folder "#{ENV['USERPROFILE']}//Downloads", "/mnt/hgfs"
		# ####################################################################		
		#
		vgu2004L.vm.post_up_message = "Start scripts in /home/vagrant voor verdere configuratie"
		#
		#
		# Installatie Docker-CE en Compose plugin
		# Eventueel pull images
		#
		# https://developer.hashicorp.com/vagrant/docs/provisioning/docker
		#
		# C:\HashiCorp\Vagrant\embedded\gems\gems\vagrant-2.3.7\plugins\provisioners\docker\cap\debian
		#
		# vgu2004L.vm.provision "docker" do |d|
		#	d.pull_images "hello-world"				# 	13.3 KB
		#	d.pull_images "alpine"					# 	7.33 MB
		#	d.pull_images "debian"					#	116 MB
		#	d.pull_images "registry"				# 	24 MB
		#	# d.pull_images "odoo"					#	1.68 GB
		#	d.pull_images "quay.io/minio/minio"		#	277 MB
		# end
		#
		# Installatie Ansible + uitvoeren playbook.yml
		#
		# vgu2204M.vm.provision "ansible_local" do |ansible|
		#	ansible.playbook = "playbook.yml"
		# end
		#
		# https://developer.hashicorp.com/vagrant/docs/providers/vmware
		vgu2004L.vm.provider "vmware_desktop" do |vgu2004lsettings|
			#
			vgu2004lsettings.gui = true
			vgu2004lsettings.linked_clone = false
			#
			vgu2004lsettings.cpus = "2"
			vgu2004lsettings.memory = "8192"
			# vgu2210msettings.nat_device = "VMnet8"
			#		
			vgu2004lsettings.vmx["tools.syncTime"] = "TRUE"
			vgu2004lsettings.vmx["displayName"] = "Vagrant-vgu2004L"
			vgu2004lsettings.vmx["annotation"] = "Ubuntu 20.04.0x LTS Large|0D|0A |0D|0ADocker-CE|0D|0A |0D|0AUsername/Password = vagrant"
			#
			# == NAT naar VMnet8 via VMX
			# vmw.vmx["ethernet0.present"] = "TRUE"
			# vmw.vmx["ethernet0.vnet"] = "VMnet8"
			# vmw.vmx["ethernet0.displayName"] = "VMnet8"
			# vmw.vmx["ethernet0.connectionType"] = "custom"
			# vmw.vmx["ethernet0.virtualDev"] = "e1000"
			#
			# == Shared Folders via VMX
			# vmw.vmx["sharedFolder0.present"] = "TRUE"	 
			# vmw.vmx["sharedFolder0.enabled"] = "TRUE"
			# vmw.vmx["sharedFolder0.readAccess"] = "TRUE"
			# vmw.vmx["sharedFolder0.writeAccess"] = "TRUE"
			# vmw.vmx["sharedFolder0.hostPath"] = "C://Users"
			# vmw.vmx["sharedFolder0.guestName"] = "Users"
			# vmw.vmx["sharedFolder0.expiration"] = "never"
			# vmw.vmx["sharedFolder.maxNum"] = "1"
		end 
		# Scripts die bij eerste start of provision parameter worden uitgevoerd
		vgu2004L.vm.provision "shell", inline: <<-SHELL
			#
			wget https://raw.githubusercontent.com/msiekmans/linux-server-scripts/main/install-mysqlserver.sh
			wget https://raw.githubusercontent.com/msiekmans/linux-server-scripts/main/install-webserver.sh
			#
			#
		SHELL
		vgu2004L.vm.provision "shell", inline: $ubuntu_repo
		vgu2004L.vm.provision "shell", inline: $ubuntu_upgrade
		vgu2004L.vm.provision "shell", inline: $ubuntu_utils_install
		vgu2004L.vm.provision "shell", inline: $minikube_installatie
		vgu2004L.vm.provision "shell", inline: $minio_docker
		vgu2004L.vm.provision "shell", inline: $ansible_installatie 
		vgu2004L.vm.provision "shell", inline: $minio_installatie
		# Scripts die bij IEDERE start van de VM worden uitgevoerd
		vgu2004L.vm.provision "shell", run: "always", inline: <<-SHELL
			#
			# bijvoorbeeld sudo systemctl start nginx
			#
			#
		SHELL
		vgu2004L.vm.provision "shell", run: "always", inline: $ubuntu_repo
		vgu2004L.vm.provision "shell", run: "always", inline: $ubuntu_upgrade  
		vgu2004L.vm.provision "shell", run: "always", inline: $ubuntu_utils_install
	end 
	#
	#
	# Generic Ubuntu 22.04.02 LTS
	#
	# Released: 	23 february 2023
	# Supported: 	April 2027
	#
	# https://wiki.ubuntu.com/Releases
	# --------------------------------
	#
	#
	# ##########################################################################################
	#
	# Versie 4.0 Alpha
	#
	#
	#
	#
	# https://stackoverflow.com/questions/24072916/multi-vm-in-one-vagrantfile-could-i-set-different-memory-size-for-each-of-them
	#
	# http://sysadm.pp.ua/linux/sistemy-virtualizacii/vagrantfile.html
	#
	# https://ctrlnotes.com/vagrant-advanced-examples/#-insert-custom-ssh-public-key-to-the-vm
	#
	#
	#
	#
	# servers.each do |machine|
	#
	#	config.vm.define machine[:hostname] do |node|
	#
	#		node.vm.box = machine[:box]
	#		node.vm.box_check_update = true
	#		node.vm.hostname = machine[:hostname]
	#
	# 		node.ssh.username = "vagrant"
	#		node.ssh.password = "vagrant"
	#
	#		node.vm.network "private_network", type: "dhcp"
	#
	#		node.vm.synced_folder "C://Users//#{ENV['USERNAME']}", "/home/#{ENV['USERNAME']}"
	#		node.vm.synced_folder "#{ENV['USERPROFILE']}//Downloads", "/home/vagrant/downloads"
	#		node.vm.synced_folder "#{ENV['USERPROFILE']}//Documents", "/home/vagrant/documents"
	#
	#		node.vm.provision "docker" do |d|
	# 			d.pull_images "hello-world"				# 	13.3 KB
	#			d.pull_images "alpine"					# 	7.33 MB
	#			d.pull_images "debian"					#	116 MB
	#			d.pull_images "registry"				# 	24 MB
	#			# d.pull_images "odoo"					#	1.68 GB
	#			d.pull_images "quay.io/minio/minio"		#	277 MB
	# 		end
	#
	#		node.vm.provider "vmware_desktop" do |vmwvm|
	#			vmwvm.gui = true
	#			vmwvm.linked_clone = false
	#			vmwvm.vmx["tools.syncTime"] = "TRUE"
	#			vmwvm.vmx["displayName"] = "Vagrant-#{machine[:hostname]}"
	#
	#
	#		node.vm.provider "virtualbox" do |vb|
	#			vb.customize ["modifyvm", :id, "--memory", machine[:ram]]
	#
	#
	#
	#
	#
	#
	#
	#		end
	#	end
	#
	#
	#
	#
	#
	#
	#
	# ##########################################################################################	
	#
	#
	#
	#
	#
	# ====================================================================================
	# [vgu2204S] Generic Ubuntu 22.04.02 LTS met 2GB RAM (SMALL)
	# ====================================================================================
	#
	#
	config.vm.define "vgu2204S" do |vgu2204S|
		#
		vgu2204S.vm.box = "generic/ubuntu2204"
		vgu2204S.vm.box_check_update = true
		vgu2204S.vm.hostname = "Vagrant-vgu2204S"
		#
		vgu2204S.ssh.username = "vagrant"
		vgu2204S.ssh.password = "vagrant"
		#
		# ####################################################################	
		# Adapter 2 Host-Only	
		vgu2204S.vm.network "private_network", type: "dhcp"
		# Adapter 3 Bridged
		# vgu2204S.vm.network "public_network", bridge: "VMware Virtual Ethernet Adapter for VMnet8"
		# vgu2204S.vm.network "public_network", bridge: "Ethernet"
		# ####################################################################
		#	
		# ####################################################################		
		# https://developer.hashicorp.com/vagrant/docs/synced-folders/basic_usage
		vgu2204S.vm.synced_folder "C://Users//#{ENV['USERNAME']}", "/home/#{ENV['USERNAME']}"
		vgu2204S.vm.synced_folder "#{ENV['USERPROFILE']}//Downloads", "/home/vagrant/downloads"
		vgu2204S.vm.synced_folder "#{ENV['USERPROFILE']}//Documents", "/home/vagrant/documents"
		# 2204M.vm.synced_folder "#{ENV['USERPROFILE']}//Downloads", "/mnt/hgfs"
		# ####################################################################		
		#
		vgu2204S.vm.post_up_message = "Start scripts in /home/vagrant voor verdere configuratie"
		#
		#
		# Installatie Docker-CE en Compose plugin
		# Eventueel pull images
		#
		# https://developer.hashicorp.com/vagrant/docs/provisioning/docker
		#
		# C:\HashiCorp\Vagrant\embedded\gems\gems\vagrant-2.3.7\plugins\provisioners\docker\cap\debian
		#
		# vgu2204S.vm.provision "docker" do |d|
		# 	d.pull_images "hello-world"				# 	13.3 KB
		#	d.pull_images "alpine"					# 	7.33 MB
		#	d.pull_images "debian"					#	116 MB
		#	d.pull_images "registry"				# 	24 MB
		#	# d.pull_images "odoo"					#	1.68 GB
		#	d.pull_images "quay.io/minio/minio"		#	277 MB
		# end
		#
		# Installatie Ansible + uitvoeren playbook.yml
		#
		# vgu2204S.vm.provision "ansible_local" do |ansible|
		#	ansible.playbook = "playbook.yml"
		# end
		#
		# https://developer.hashicorp.com/vagrant/docs/providers/vmware
		vgu2204S.vm.provider "vmware_desktop" do |vgu2204ssettings|
			#
			vgu2204ssettings.gui = true
			vgu2204ssettings.linked_clone = false
			#
			vgu2204ssettings.cpus = "2"
			vgu2204ssettings.memory = "2048"
			# vgu2204ssettings.nat_device = "VMnet8"
			#		
			vgu2204ssettings.vmx["tools.syncTime"] = "TRUE"
			vgu2204ssettings.vmx["displayName"] = "Vagrant-vgu2204S"
			vgu2204ssettings.vmx["annotation"] = "Ubuntu 22.04.02 LTS Small|0D|0A |0D|0AUsername/Password = vagrant"
			#
			# == NAT naar VMnet8 via VMX
			# vmw.vmx["ethernet0.present"] = "TRUE"
			# vmw.vmx["ethernet0.vnet"] = "VMnet8"
			# vmw.vmx["ethernet0.displayName"] = "VMnet8"
			# vmw.vmx["ethernet0.connectionType"] = "custom"
			# vmw.vmx["ethernet0.virtualDev"] = "e1000"
			#
			# == Shared Folders via VMX
			# vmw.vmx["sharedFolder0.present"] = "TRUE"	 
			# vmw.vmx["sharedFolder0.enabled"] = "TRUE"
			# vmw.vmx["sharedFolder0.readAccess"] = "TRUE"
			# vmw.vmx["sharedFolder0.writeAccess"] = "TRUE"
			# vmw.vmx["sharedFolder0.hostPath"] = "C://Users"
			# vmw.vmx["sharedFolder0.guestName"] = "Users"
			# vmw.vmx["sharedFolder0.expiration"] = "never"
			# vmw.vmx["sharedFolder.maxNum"] = "1"
		end 
		# Scripts die bij eerste start of provision parameter worden uitgevoerd
		vgu2204S.vm.provision "shell", inline: <<-SHELL
			#
			#
			#
			#
		SHELL
		vgu2204S.vm.provision "shell", inline: $ubuntu_repo
		vgu2204S.vm.provision "shell", inline: $ubuntu_upgrade  
		vgu2204S.vm.provision "shell", inline: $ubuntu_utils_install
		# Scripts die bij IEDERE start van de VM worden uitgevoerd
		vgu2204S.vm.provision "shell", run: "always", inline: <<-SHELL
			#
			# bijvoorbeeld sudo systemctl start nginx
			#
			#
		SHELL
		vgu2204S.vm.provision "shell", run: "always", inline: $ubuntu_repo
		vgu2204S.vm.provision "shell", run: "always", inline: $ubuntu_upgrade  
		vgu2204S.vm.provision "shell", run: "always", inline: $ubuntu_utils_install
	end 
	#
	#
	# ====================================================================================
	# [vgu2204M] Generic Ubuntu 22.04.02 LTS met 4GB RAM (Medium)
	# ====================================================================================
	#
	#
	config.vm.define "vgu2204M" do |vgu2204M|
		#
		vgu2204M.vm.box = "generic/ubuntu2204"
		vgu2204M.vm.box_check_update = true
		vgu2204M.vm.hostname = "Vagrant-vgu2204M"
		#
		vgu2204M.ssh.username = "vagrant"
		vgu2204M.ssh.password = "vagrant"
		#
		# ####################################################################	
		# Adapter 2 Host-Only	
		vgu2204M.vm.network "private_network", type: "dhcp"
		# Adapter 3 Bridged
		# vgu2204M.vm.network "public_network", bridge: "VMware Virtual Ethernet Adapter for VMnet8"
		# vgu2204M.vm.network "public_network", bridge: "Ethernet"
		# ####################################################################
		#	
		# ####################################################################		
		# https://developer.hashicorp.com/vagrant/docs/synced-folders/basic_usage
		vgu2204M.vm.synced_folder "C://Users//#{ENV['USERNAME']}", "/home/#{ENV['USERNAME']}"
		vgu2204M.vm.synced_folder "#{ENV['USERPROFILE']}//Downloads", "/home/vagrant/downloads"
		vgu2204M.vm.synced_folder "#{ENV['USERPROFILE']}//Documents", "/home/vagrant/documents"
		# 2204M.vm.synced_folder "#{ENV['USERPROFILE']}//Downloads", "/mnt/hgfs"
		# ####################################################################		
		#
		vgu2204M.vm.post_up_message = "Start scripts in /home/vagrant voor verdere configuratie"
		#
		#
		# Installatie Docker-CE en Compose plugin
		# Eventueel pull images
		#
		# https://developer.hashicorp.com/vagrant/docs/provisioning/docker
		#
		# C:\HashiCorp\Vagrant\embedded\gems\gems\vagrant-2.3.7\plugins\provisioners\docker\cap\debian
		#
		vgu2204M.vm.provision "docker" do |d|
			d.pull_images "hello-world"				# 	13.3 KB
			d.pull_images "alpine"					# 	7.33 MB
			d.pull_images "debian"					#	116 MB
			d.pull_images "registry"				# 	24 MB
			# d.pull_images "odoo"					#	1.68 GB
			d.pull_images "quay.io/minio/minio"		#	277 MB
		end
		#
		# Installatie Ansible + uitvoeren playbook.yml
		#
		# vgu2204M.vm.provision "ansible_local" do |ansible|
		#	ansible.playbook = "playbook.yml"
		# end
		#
		# https://developer.hashicorp.com/vagrant/docs/providers/vmware
		vgu2204M.vm.provider "vmware_desktop" do |vgu2204msettings|
			#
			vgu2204msettings.gui = true
			vgu2204msettings.linked_clone = false
			#
			vgu2204msettings.cpus = "2"
			vgu2204msettings.memory = "4096"
			# vgu2210msettings.nat_device = "VMnet8"
			#		
			vgu2204msettings.vmx["tools.syncTime"] = "TRUE"
			vgu2204msettings.vmx["displayName"] = "Vagrant-vgu2204M"
			vgu2204msettings.vmx["annotation"] = "Ubuntu 22.04.02 LTS Medium|0D|0A |0D|0ADocker-CE|0D|0A |0D|0AUsername/Password = vagrant"
			#
			# == NAT naar VMnet8 via VMX
			# vmw.vmx["ethernet0.present"] = "TRUE"
			# vmw.vmx["ethernet0.vnet"] = "VMnet8"
			# vmw.vmx["ethernet0.displayName"] = "VMnet8"
			# vmw.vmx["ethernet0.connectionType"] = "custom"
			# vmw.vmx["ethernet0.virtualDev"] = "e1000"
			#
			# == Shared Folders via VMX
			# vmw.vmx["sharedFolder0.present"] = "TRUE"	 
			# vmw.vmx["sharedFolder0.enabled"] = "TRUE"
			# vmw.vmx["sharedFolder0.readAccess"] = "TRUE"
			# vmw.vmx["sharedFolder0.writeAccess"] = "TRUE"
			# vmw.vmx["sharedFolder0.hostPath"] = "C://Users"
			# vmw.vmx["sharedFolder0.guestName"] = "Users"
			# vmw.vmx["sharedFolder0.expiration"] = "never"
			# vmw.vmx["sharedFolder.maxNum"] = "1"
		end 
		# Scripts die bij eerste start of provision parameter worden uitgevoerd
		vgu2204M.vm.provision "shell", inline: <<-SHELL
			#
			#
			#
			#
		SHELL
		vgu2204M.vm.provision "shell", inline: $ubuntu_repo
		vgu2204M.vm.provision "shell", inline: $ubuntu_upgrade
		vgu2204M.vm.provision "shell", inline: $ubuntu_utils_install
		vgu2204M.vm.provision "shell", inline: $minikube_installatie
		vgu2204M.vm.provision "shell", inline: $minio_docker
		vgu2204M.vm.provision "shell", inline: $ansible_installatie
		# Scripts die bij IEDERE start van de VM worden uitgevoerd
		vgu2204M.vm.provision "shell", run: "always", inline: <<-SHELL
			#
			# bijvoorbeeld sudo systemctl start nginx
			#
			#
		SHELL
		vgu2204M.vm.provision "shell", run: "always", inline: $ubuntu_repo
		vgu2204M.vm.provision "shell", run: "always", inline: $ubuntu_upgrade  
		vgu2204M.vm.provision "shell", run: "always", inline: $ubuntu_utils_install
	end 
	#
	#
	# ====================================================================================
	# [vgu2204L] Generic Ubuntu 22.04.02 LTS met 8GB RAM (LARGE)
	# ====================================================================================
	#
	#
	#
	config.vm.define "vgu2204L" do |vgu2204L|
		#
		vgu2204L.vm.box = "generic/ubuntu2204"
		vgu2204L.vm.box_check_update = true
		vgu2204L.vm.hostname = "Vagrant-vgu2204L"
		#
		vgu2204L.ssh.username = "vagrant"
		vgu2204L.ssh.password = "vagrant"
		#
		# ####################################################################	
		# Adapter 2 Host-Only	
		vgu2204L.vm.network "private_network", type: "dhcp"
		# Adapter 3 Bridged
		# vgu2204L.vm.network "public_network", bridge: "VMware Virtual Ethernet Adapter for VMnet8"
		# vgu2204L.vm.network "public_network", bridge: "Ethernet"
		# ####################################################################
		#	
		# ####################################################################		
		# https://developer.hashicorp.com/vagrant/docs/synced-folders/basic_usage
		vgu2204L.vm.synced_folder "C://Users//#{ENV['USERNAME']}", "/home/#{ENV['USERNAME']}"
		vgu2204L.vm.synced_folder "#{ENV['USERPROFILE']}//Downloads", "/home/vagrant/downloads"
		vgu2204L.vm.synced_folder "#{ENV['USERPROFILE']}//Documents", "/home/vagrant/documents"
		# 2204M.vm.synced_folder "#{ENV['USERPROFILE']}//Downloads", "/mnt/hgfs"
		# ####################################################################		
		#
		vgu2204L.vm.post_up_message = "Start scripts in /home/vagrant voor verdere configuratie"
		#
		#
		# Installatie Docker-CE en Compose plugin
		# Eventueel pull images
		#
		# https://developer.hashicorp.com/vagrant/docs/provisioning/docker
		#
		# C:\HashiCorp\Vagrant\embedded\gems\gems\vagrant-2.3.7\plugins\provisioners\docker\cap\debian
		#
		vgu2204L.vm.provision "docker" do |d|
			d.pull_images "hello-world"				# 	13.3 KB
			d.pull_images "alpine"					# 	7.33 MB
			d.pull_images "debian"					#	116 MB
			d.pull_images "registry"				# 	24 MB
			# d.pull_images "odoo"					#	1.68 GB
			d.pull_images "quay.io/minio/minio"		#	277 MB
		end
		#
		# Installatie Ansible + uitvoeren playbook.yml
		#
		# vgu2204M.vm.provision "ansible_local" do |ansible|
		#	ansible.playbook = "playbook.yml"
		# end
		#
		# https://developer.hashicorp.com/vagrant/docs/providers/vmware
		vgu2204L.vm.provider "vmware_desktop" do |vgu2204lsettings|
			#
			vgu2204lsettings.gui = true
			vgu2204lsettings.linked_clone = false
			#
			vgu2204lsettings.cpus = "2"
			vgu2204lsettings.memory = "8192"
			# vgu2210msettings.nat_device = "VMnet8"
			#		
			vgu2204lsettings.vmx["tools.syncTime"] = "TRUE"
			vgu2204lsettings.vmx["displayName"] = "Vagrant-vgu2204L"
			vgu2204lsettings.vmx["annotation"] = "Ubuntu 22.04.02 LTS Large|0D|0A |0D|0ADocker-CE|0D|0A |0D|0AUsername/Password = vagrant"
			#
			# == NAT naar VMnet8 via VMX
			# vmw.vmx["ethernet0.present"] = "TRUE"
			# vmw.vmx["ethernet0.vnet"] = "VMnet8"
			# vmw.vmx["ethernet0.displayName"] = "VMnet8"
			# vmw.vmx["ethernet0.connectionType"] = "custom"
			# vmw.vmx["ethernet0.virtualDev"] = "e1000"
			#
			# == Shared Folders via VMX
			# vmw.vmx["sharedFolder0.present"] = "TRUE"	 
			# vmw.vmx["sharedFolder0.enabled"] = "TRUE"
			# vmw.vmx["sharedFolder0.readAccess"] = "TRUE"
			# vmw.vmx["sharedFolder0.writeAccess"] = "TRUE"
			# vmw.vmx["sharedFolder0.hostPath"] = "C://Users"
			# vmw.vmx["sharedFolder0.guestName"] = "Users"
			# vmw.vmx["sharedFolder0.expiration"] = "never"
			# vmw.vmx["sharedFolder.maxNum"] = "1"
		end 
		# Scripts die bij eerste start of provision parameter worden uitgevoerd
		vgu2204L.vm.provision "shell", inline: <<-SHELL
			#
			#
			#
			#
		SHELL
		vgu2204L.vm.provision "shell", inline: $ubuntu_repo
		vgu2204L.vm.provision "shell", inline: $ubuntu_upgrade
		vgu2204L.vm.provision "shell", inline: $ubuntu_utils_install
		vgu2204L.vm.provision "shell", inline: $minikube_installatie
		vgu2204L.vm.provision "shell", inline: $minio_docker
		vgu2204L.vm.provision "shell", inline: $ansible_installatie 
		vgu2204L.vm.provision "shell", inline: $minio_installatie
		# Scripts die bij IEDERE start van de VM worden uitgevoerd
		vgu2204L.vm.provision "shell", run: "always", inline: <<-SHELL
			#
			# bijvoorbeeld sudo systemctl start nginx
			#
			#
		SHELL
		vgu2204L.vm.provision "shell", run: "always", inline: $ubuntu_repo
		vgu2204L.vm.provision "shell", run: "always", inline: $ubuntu_upgrade  
		vgu2204L.vm.provision "shell", run: "always", inline: $ubuntu_utils_install
	end 
	#
	#
	# Generic Ubuntu 22.10 (Release 20 oktober 2022) (non-LTS release) 
	# https://wiki.ubuntu.com/Releases
	# -----------------------------------------------------------------
	#
	#
	# ====================================================================================
	# [vgu2210S] Generic Ubuntu 22.10 met 2GB RAM (SMALL)
	# ====================================================================================
	#
	#
	config.vm.define "vgu2210S" do |vgu2210S|
		#
		vgu2210S.vm.box = "generic/ubuntu2210"
		vgu2210S.vm.box_check_update = true
		vgu2210S.vm.hostname = "Vagrant-vgu2210S"
		#
		# ####################################################################	
		# Adapter 2 Host-Only	
		vgu2210S.vm.network "private_network", type: "dhcp"
		# Adapter 3 Bridged
		# vgu2210S.vm.network "public_network", bridge: "VMware Virtual Ethernet Adapter for VMnet8"
		# vgu2210S.vm.network "public_network", bridge: "Ethernet"		
		# ####################################################################
		#	
		# ####################################################################		
		# https://developer.hashicorp.com/vagrant/docs/synced-folders/basic_usage
		vgu2210S.vm.synced_folder "C://Users//#{ENV['USERNAME']}", "/home/#{ENV['USERNAME']}"
		vgu2210S.vm.synced_folder "#{ENV['USERPROFILE']}//Downloads", "/home/vagrant/downloads"
		vgu2210S.vm.synced_folder "#{ENV['USERPROFILE']}//Documents", "/home/vagrant/documents"
		# vgu2210S.vm.synced_folder "#{ENV['USERPROFILE']}//Downloads", "/mnt/hgfs"
		# ####################################################################		
		#
		vgu2210S.vm.post_up_message = "Start scripts in /home/vagrant voor verdere configuratie"
		#
		# https://developer.hashicorp.com/vagrant/docs/providers/vmware
		vgu2210S.vm.provider "vmware_desktop" do |vgu2210ssettings|
			#
			vgu2210ssettings.gui = true
			vgu2210ssettings.linked_clone = false
			#
			vgu2210ssettings.cpus = "2"
			vgu2210ssettings.memory = "2048"
			vgu2210ssettings.nat_device = "VMnet8"
			#
			vgu2210ssettings.vmx["tools.syncTime"] = "TRUE"
			vgu2210ssettings.vmx["displayName"] = "Vagrant-vgu2210S"
			vgu2210ssettings.vmx["annotation"] = "Ubuntu 22.10 LTS |0D|0A |0D|0AUsername/Password = vagrant"
			#
			# == NAT naar VMnet8 via VMX
			# vmw.vmx["ethernet0.present"] = "TRUE"
			# vmw.vmx["ethernet0.vnet"] = "VMnet8"
			# vmw.vmx["ethernet0.displayName"] = "VMnet8"
			# vmw.vmx["ethernet0.connectionType"] = "custom"
			# vmw.vmx["ethernet0.virtualDev"] = "e1000"
			#
			# == Shared Folders via VMX
			# vmw.vmx["sharedFolder0.present"] = "TRUE"	 
			# vmw.vmx["sharedFolder0.enabled"] = "TRUE"
			# vmw.vmx["sharedFolder0.readAccess"] = "TRUE"
			# vmw.vmx["sharedFolder0.writeAccess"] = "TRUE"
			# vmw.vmx["sharedFolder0.hostPath"] = "C://Users"
			# vmw.vmx["sharedFolder0.guestName"] = "Users"
			# vmw.vmx["sharedFolder0.expiration"] = "never"
			# vmw.vmx["sharedFolder.maxNum"] = "1"
		end 
		# Scripts die bij eerste start of provision parameter worden uitgevoerd
		vgu2210S.vm.provision "shell", inline: <<-SHELL
			#
			#
			#
			#
			#
		SHELL
		vgu2210S.vm.provision "shell", inline: $ubuntu_repo
		vgu2210S.vm.provision "shell", inline: $ubuntu_upgrade   
		vgu2210S.vm.provision "shell", inline: $ubuntu_utils_install
		# Scripts die bij IEDERE start van de VM worden uitgevoerd
		vgu2210S.vm.provision "shell", run: "always", inline: <<-SHELL
			#
			# bijvoorbeeld sudo systemctl start nginx
			#
			#
		SHELL
		vgu2210S.vm.provision "shell", run: "always", inline: $ubuntu_repo
		vgu2210S.vm.provision "shell", run: "always", inline: $ubuntu_upgrade   
		vgu2210S.vm.provision "shell", run: "always", inline: $ubuntu_utils_install
	end 
	#
	#
	# ====================================================================================  
	# [vgu2210M] Generic Ubuntu 22.10 met 4GB RAM (MEDIUM)
	# ====================================================================================
	#
	#
	config.vm.define "vgu2210M" do |vgu2210M|
		#
		vgu2210M.vm.box = "generic/ubuntu2210"
		vgu2210M.vm.box_check_update = true
		vgu2210M.vm.hostname = "Vagrant-vgu2210M"
		#
		# ####################################################################	
		# Adapter 2 Host-Only	
		vgu2210M.vm.network "private_network", type: "dhcp"
		# Adapter 3 Bridged
		# vgu2210M.vm.network "public_network", bridge: "VMware Virtual Ethernet Adapter for VMnet8"
		# vgu2210M.vm.network "public_network", bridge: "Ethernet"		
		# ####################################################################
		#	
		# ####################################################################		
		# https://developer.hashicorp.com/vagrant/docs/synced-folders/basic_usage
		vgu2210M.vm.synced_folder "C://Users//#{ENV['USERNAME']}", "/home/#{ENV['USERNAME']}"
		vgu2210M.vm.synced_folder "#{ENV['USERPROFILE']}//Downloads", "/home/vagrant/downloads"
		vgu2210M.vm.synced_folder "#{ENV['USERPROFILE']}//Documents", "/home/vagrant/documents"
		# vgu2210M.vm.synced_folder "#{ENV['USERPROFILE']}//Downloads", "/mnt/hgfs"
		# ####################################################################		
		#
		vgu2210M.vm.post_up_message = "Start scripts in /home/vagrant voor verdere configuratie"
		#
		#
		# Installatie Docker-CE en Compose plugin
		# Eventueel pull images
		#
		# https://developer.hashicorp.com/vagrant/docs/provisioning/docker
		#
		vgu2210M.vm.provision "docker" do |d|
			d.pull_images "hello-world"				# 	13.3 KB
			d.pull_images "alpine"					# 	7.33 MB
			d.pull_images "debian"					#	116 MB
			d.pull_images "registry"				# 	24 MB
			# d.pull_images "odoo"					#	1.68 GB
			d.pull_images "quay.io/minio/minio"		#	277 MB
		end
		#
		# Installatie Ansible + uitvoeren playbook.yml
		#
		# vgu2210M.vm.provision "ansible_local" do |ansible|
		#	ansible.playbook = "playbook.yml"
		# end
		#
		# https://developer.hashicorp.com/vagrant/docs/providers/vmware
		vgu2210M.vm.provider "vmware_desktop" do |vgu2210msettings|
			#
			vgu2210msettings.gui = true
			vgu2210msettings.linked_clone = false
			#
			vgu2210msettings.cpus = "2"
			vgu2210msettings.memory = "4096"
			# vgu2210msettings.nat_device = "VMnet8"
			#		
			vgu2210msettings.vmx["tools.syncTime"] = "TRUE"
			vgu2210msettings.vmx["displayName"] = "Vagrant-vgu2210M"
			vgu2210msettings.vmx["annotation"] = "Ubuntu 22.10 LTS |0D|0A |0D|0AUsername/Password = vagrant"
			#
			# == NAT naar VMnet8 via VMX
			# vmw.vmx["ethernet0.present"] = "TRUE"
			# vmw.vmx["ethernet0.vnet"] = "VMnet8"
			# vmw.vmx["ethernet0.displayName"] = "VMnet8"
			# vmw.vmx["ethernet0.connectionType"] = "custom"
			# vmw.vmx["ethernet0.virtualDev"] = "e1000"
			#
			# == Shared Folders via VMX
			# vmw.vmx["sharedFolder0.present"] = "TRUE"	 
			# vmw.vmx["sharedFolder0.enabled"] = "TRUE"
			# vmw.vmx["sharedFolder0.readAccess"] = "TRUE"
			# vmw.vmx["sharedFolder0.writeAccess"] = "TRUE"
			# vmw.vmx["sharedFolder0.hostPath"] = "C://Users"
			# vmw.vmx["sharedFolder0.guestName"] = "Users"
			# vmw.vmx["sharedFolder0.expiration"] = "never"
			# vmw.vmx["sharedFolder.maxNum"] = "1"
		end 
		# Scripts die bij eerste start of provision parameter worden uitgevoerd
		vgu2210M.vm.provision "shell", inline: <<-SHELL
			#
			#
			#
			#
		SHELL
		vgu2210M.vm.provision "shell", inline: $ubuntu_repo
		vgu2210M.vm.provision "shell", inline: $ubuntu_upgrade
		vgu2210M.vm.provision "shell", inline: $ubuntu_utils_install
		vgu2210M.vm.provision "shell", inline: $minikube_installatie
		vgu2210M.vm.provision "shell", inline: $minio_docker
		vgu2210M.vm.provision "shell", inline: $ansible_installatie
		# Scripts die bij IEDERE start van de VM worden uitgevoerd
		vgu2210M.vm.provision "shell", run: "always", inline: <<-SHELL
			#
			# bijvoorbeeld sudo systemctl start nginx
			#
			#
		SHELL
		vgu2210M.vm.provision "shell", run: "always", inline: $ubuntu_repo
		vgu2210M.vm.provision "shell", run: "always", inline: $ubuntu_upgrade
		vgu2210M.vm.provision "shell", run: "always", inline: $ubuntu_utils_install
	end   
	#
	#
	# ====================================================================================  
	# [vgu2210L] Generic Ubuntu 22.10 met 8GB RAM (LARGE)
	# ====================================================================================  
	#
	#
	config.vm.define "vgu2210L" do |vgu2210L|
		#
		vgu2210L.vm.box = "generic/ubuntu2210"
		vgu2210L.vm.box_check_update = true   
		vgu2210L.vm.hostname = "Vagrant-vgu2210L"
		#
		# ####################################################################	
		# Adapter 2 Host-Only	
		vgu2210L.vm.network "private_network", type: "dhcp"
		# Adapter 3 Bridged
		# vgu2210L.vm.network "public_network", bridge: "VMware Virtual Ethernet Adapter for VMnet8"
		# vgu2210L.vm.network "public_network", bridge: "Ethernet"		
		# ####################################################################
		#	
		# ####################################################################	
		# https://developer.hashicorp.com/vagrant/docs/synced-folders/basic_usage
		vgu2210L.vm.synced_folder "C://Users//#{ENV['USERNAME']}", "/home/#{ENV['USERNAME']}"
		vgu2210L.vm.synced_folder "#{ENV['USERPROFILE']}//Downloads", "/home/vagrant/downloads"
		vgu2210L.vm.synced_folder "#{ENV['USERPROFILE']}//Documents", "/home/vagrant/documents"
		# vgu2210L.vm.synced_folder "#{ENV['USERPROFILE']}//Downloads", "/mnt/hgfs"
		# ####################################################################
		#
		vgu2210L.vm.post_up_message = "Start scripts in /home/vagrant voor verdere configuratie"
		#
		# Installatie Docker-CE en Compose plugin
		# Eventueel pull images
		#
		# https://developer.hashicorp.com/vagrant/docs/provisioning/docker
		#
		vgu2210L.vm.provision "docker" do |d|
			d.pull_images "hello-world"				# 	13.3 KB
			d.pull_images "alpine"					# 	7.33 MB
			d.pull_images "debian"					#	116 MB
			d.pull_images "registry"				# 	24 MB
			# d.pull_images "odoo"					#	1.68 GB
			d.pull_images "quay.io/minio/minio"		#	277 MB
		end
		#
		# Installatie Ansible + uitvoeren playbook.yml
		#
		# vgu2210L.vm.provision "ansible_local" do |ansible|
		#	ansible.playbook = "playbook.yml"
		# end
		#
		# https://developer.hashicorp.com/vagrant/docs/providers/vmware
		vgu2210L.vm.provider "vmware_desktop" do |vgu2210lsettings|
			#
			vgu2210lsettings.gui = true
			vgu2210lsettings.linked_clone = false
			#
			vgu2210lsettings.cpus = "2"
			vgu2210lsettings.memory = "8192"
			# vgu2210lsettings.nat_device = "vmnet8"
			#
			vgu2210lsettings.vmx["tools.syncTime"] = "TRUE"
			vgu2210lsettings.vmx["displayName"] = "Vagrant-vgu2210L"
			vgu2210lsettings.vmx["annotation"] = "Ubuntu 22.10 LTS |0D|0A |0D|0AUsername/Password = vagrant"
			#
			#
			# == NAT naar VMnet8 via VMX
			# vgu2210lsettings.vmx["ethernet0.vnet"] = "VMnet8"
			# vgu2210lsettings.vmx["ethernet0.displayName"] = "VMnet8"
			# vgu2210lsettings.vmx["ethernet0.connectionType"] = "custom"
			# vgu2210lsettings.vmx["ethernet0.present"] = "TRUE"
			# vgu2210lsettings.vmx["ethernet0.virtualDev"] = "e1000"
			#
			# == Shared Folders via VMX
			# vmw.vmx["sharedFolder0.present"] = "TRUE"	 
			# vmw.vmx["sharedFolder0.enabled"] = "TRUE"
			# vmw.vmx["sharedFolder0.readAccess"] = "TRUE"
			# vmw.vmx["sharedFolder0.writeAccess"] = "TRUE"
			# vmw.vmx["sharedFolder0.hostPath"] = "C://Users"
			# vmw.vmx["sharedFolder0.guestName"] = "Users"
			# vmw.vmx["sharedFolder0.expiration"] = "never"
			# vmw.vmx["sharedFolder.maxNum"] = "1"
		end 
		# Scripts die bij eerste start of provision parameter worden uitgevoerd
		vgu2210L.vm.provision "shell", inline: <<-SHELL
			#
			# 
			#
			#
		SHELL
		vgu2210L.vm.provision "shell", inline: $ubuntu_repo
		vgu2210L.vm.provision "shell", inline: $ubuntu_upgrade
		vgu2210L.vm.provision "shell", inline: $ubuntu_utils_install
		vgu2210L.vm.provision "shell", inline: $minikube_installatie
		vgu2210L.vm.provision "shell", inline: $minio_docker
		vgu2210L.vm.provision "shell", inline: $ansible_installatie 
		vgu2210L.vm.provision "shell", inline: $minio_installatie
		# Scripts die bij IEDERE start van de VM worden uitgevoerd
		vgu2210L.vm.provision "shell", run: "always", inline: <<-SHELL
			#
			# bijvoorbeeld sudo systemctl start nginx
			#
			#
		SHELL
		vgu2210L.vm.provision "shell", run: "always", inline: $ubuntu_repo
		vgu2210L.vm.provision "shell", run: "always", inline: $ubuntu_upgrade
		vgu2210L.vm.provision "shell", run: "always", inline: $ubuntu_utils_install
	end 
	#
	#
	# maroskukan boxes
	# ================
	#
	#
	# maroskukan Ubuntu 22.10 (non-LTS)
	# ---------------------------------
	#
	#
	# ====================================================================================
	# [vmu2210M] Maroskukan Ubuntu 22.10 met 4GB RAM
	# ====================================================================================
	#
	#
	config.vm.define "vmu2210M" do |vmu2210M|
		#
		vmu2210M.vm.box = "maroskukan/ubuntu2210"
		vmu2210M.vm.box_check_update = true
		vmu2210M.vm.hostname = "Vagrant-vmu2210M"
		#
		# ####################################################################	
		# Adapter 2 Host-Only	
		vmu2210M.vm.network "private_network", type: "dhcp"
		# Adapter 3 Bridged
		# vmu2210M.vm.network "public_network", bridge: "VMware Virtual Ethernet Adapter for VMnet8"
		# vmu2210M.vm.network "public_network", bridge: "Ethernet"		
		# ####################################################################
		#	
		# ####################################################################	
		# https://developer.hashicorp.com/vagrant/docs/synced-folders/basic_usage
		vmu2210M.vm.synced_folder "C://Users//#{ENV['USERNAME']}", "/home/#{ENV['USERNAME']}"
		vmu2210M.vm.synced_folder "#{ENV['USERPROFILE']}//Downloads", "/home/vagrant/downloads"
		vmu2210M.vm.synced_folder "#{ENV['USERPROFILE']}//Documents", "/home/vagrant/documents"
		# vmu2210M.vm.synced_folder "#{ENV['USERPROFILE']}//Downloads", "/mnt/hgfs"
		# ####################################################################
		#
		vmu2210M.vm.post_up_message = "Start scripts in /home/vagrant voor verdere configuratie"
		#
		# Installatie Docker-CE en Compose plugin
		# Eventueel pull images
		#
		# https://developer.hashicorp.com/vagrant/docs/provisioning/docker
		#
		vmu2210M.vm.provision "docker" do |d|
			d.pull_images "hello-world"				# 	13.3 KB
			d.pull_images "alpine"					# 	7.33 MB
			d.pull_images "debian"					#	116 MB
			d.pull_images "registry"				# 	24 MB
			# d.pull_images "odoo"					#	1.68 GB
			d.pull_images "quay.io/minio/minio"		#	277 MB
		end
		#
		# Installatie Ansible + uitvoeren playbook.yml
		#
		# vmu2210M.vm.provision "ansible_local" do |ansible|
		#	ansible.playbook = "playbook.yml"
		# end
		#
		# https://developer.hashicorp.com/vagrant/docs/providers/vmware
		vmu2210M.vm.provider "vmware_desktop" do |vmu2210msettings|
			#
			vmu2210msettings.gui = true
			vmu2210msettings.linked_clone = false
			#
			vmu2210msettings.cpus = "2"
			vmu2210msettings.memory = "4096"
			#
			vmu2210msettings.vmx["tools.syncTime"] = "TRUE"
			vmu2210msettings.vmx["displayName"] = "Vagrant-vmu2210M"
			vmu2210msettings.vmx["annotation"] = "Ubuntu 22.10 LTS |0D|0A |0D|0AUsername/Password = vagrant"
		end 
		# Scripts die bij eerste start of provision parameter worden uitgevoerd
		vmu2210M.vm.provision "shell", inline: <<-SHELL
			#
			# 
			#
			#
		SHELL
		vmu2210M.vm.provision "shell", inline: $ubuntu_repo
		vmu2210M.vm.provision "shell", inline: $ubuntu_upgrade
		vmu2210M.vm.provision "shell", inline: $ubuntu_utils_install 
		vmu2210M.vm.provision "shell", inline: $minikube_installatie
		vmu2210M.vm.provision "shell", inline: $minio_docker
		vmu2210M.vm.provision "shell", inline: $ansible_installatie
		# Scripts die bij IEDERE start van de VM worden uitgevoerd
		vmu2210M.vm.provision "shell", run: "always", inline: <<-SHELL
			#
			# bijvoorbeeld sudo systemctl start nginx
			#
			#
		SHELL
		vmu2210M.vm.provision "shell", run: "always", inline: $ubuntu_repo
		vmu2210M.vm.provision "shell", run: "always", inline: $ubuntu_upgrade
		vmu2210M.vm.provision "shell", run: "always", inline: $ubuntu_utils_install
	end 
	#
	#
	# maroskukan Ubuntu 23.04
	# -----------------------
	#
	#
	# ====================================================================================
	# [vmu2304M] maroskukan Ubuntu 23.04 met 4GB RAM
	# ====================================================================================  
	#
	#
	config.vm.define "vmu2304M" do |vmu2304M|
		#
		vmu2304M.vm.box = "maroskukan/ubuntu2304"
		vmu2304M.vm.box_check_update = true
		vmu2304M.vm.hostname = "Vagrant-vmu2304M"
		#
		# ####################################################################	
		# Adapter 2 Host-Only	
		vmu2304M.vm.network "private_network", type: "dhcp"
		# Adapter 3 Bridged
		# vmu2304M.vm.network "public_network", bridge: "VMware Virtual Ethernet Adapter for VMnet8"
		# vmu2304M.vm.network "public_network", bridge: "Ethernet"		
		# ####################################################################
		#	
		# ####################################################################	
		# https://developer.hashicorp.com/vagrant/docs/synced-folders/basic_usage
		vmu2304M.vm.synced_folder "C://Users//#{ENV['USERNAME']}", "/home/#{ENV['USERNAME']}"
		vmu2304M.vm.synced_folder "#{ENV['USERPROFILE']}//Downloads", "/home/vagrant/downloads"
		vmu2304M.vm.synced_folder "#{ENV['USERPROFILE']}//Documents", "/home/vagrant/documents"
		# vmu2304M.vm.synced_folder "#{ENV['USERPROFILE']}//Downloads", "/mnt/hgfs"
		# ####################################################################
		#
		vmu2304M.vm.post_up_message = "Start scripts in /home/vagrant voor verdere configuratie"
		#
		# Installatie Docker-CE en Compose plugin
		# Eventueel pull images
		#
		# https://developer.hashicorp.com/vagrant/docs/provisioning/docker
		#
		vmu2304M.vm.provision "docker" do |d|
			d.pull_images "hello-world"				# 	13.3 KB
			d.pull_images "alpine"					# 	7.33 MB
			d.pull_images "debian"					#	116 MB
			d.pull_images "registry"				# 	24 MB
			# d.pull_images "odoo"					#	1.68 GB
			d.pull_images "quay.io/minio/minio"		#	277 MB
		end
		#
		# Installatie Ansible + uitvoeren playbook.yml
		#
		# vmu2304M.vm.provision "ansible_local" do |ansible|
		#	ansible.playbook = "playbook.yml"
		# end
		#
		# https://developer.hashicorp.com/vagrant/docs/providers/vmware
		vmu2304M.vm.provider "vmware_desktop" do |vmu2304msettings|
			#
			vmu2304msettings.gui = true
			vmu2304msettings.linked_clone = false
			#
			vmu2304msettings.cpus = "2"
			vmu2304msettings.memory = "4096"
			#
			vmu2304msettings.vmx["tools.syncTime"] = "TRUE"
			vmu2304msettings.vmx["displayName"] = "Vagrant-vmu2304M"
			vmu2304msettings.vmx["annotation"] = "Ubuntu 23.04 LTS |0D|0A |0D|0AUsername/Password = vagrant"
			#
		end 
		# Scripts die bij eerste start of provision parameter worden uitgevoerd
		vmu2304M.vm.provision "shell", inline: <<-SHELL
			#
			# 
			#
			#
		SHELL
		vmu2304M.vm.provision "shell", inline: $ubuntu_repo
		vmu2304M.vm.provision "shell", inline: $ubuntu_upgrade
		vmu2304M.vm.provision "shell", inline: $ubuntu_utils_install 
		vmu2304M.vm.provision "shell", inline: $minikube_installatie
		vmu2304M.vm.provision "shell", inline: $minio_docker
		vmu2304M.vm.provision "shell", inline: $ansible_installatie
		# Scripts die bij IEDERE start van de VM worden uitgevoerd
		vmu2304M.vm.provision "shell", run: "always", inline: <<-SHELL
			#
			# bijvoorbeeld sudo systemctl start nginx
			#
			#
		SHELL
		vmu2304M.vm.provision "shell", run: "always", inline: $ubuntu_repo
		vmu2304M.vm.provision "shell", run: "always", inline: $ubuntu_upgrade
		vmu2304M.vm.provision "shell", run: "always", inline: $ubuntu_utils_install
	end 
	#
	#
	# #########################################
	# ###             Windows               ###
	# #########################################
	# 
	# 
	# [vw10eval] Windows 10 Enterprise EVAL
	#
	#
	# 2023-07-31
	# VM wil niet opstarten in VMware Workstation
	#
	#
	# Naslag VMware omgevingen https://developer.hashicorp.com/vagrant/docs/providers/vmware
	#
	
	(0..1).each do |i|
		config.vm.define "vw1#{i}eval" do |vw1Xeval|
			#
			vw1Xeval.vm.box = "gusztavvargadr/windows-1#{i}" 
			vw1Xeval.vm.box_check_update = true
			#
			vw1Xeval.vm.hostname = "Vagrant-vw1#{i}eval"
			vw1Xeval.vm.guest = :windows
			vw1Xeval.vm.boot_timeout = 18000
			#
			vw1Xeval.winssh.shell = "cmd" 		# The shell to use when executing SSH commands from Vagrant. By default this is powershell. Valid values are "cmd" or "powershell".		
			#
			#	WinRM
			#
			vw1Xeval.vm.communicator = "winrm" 	# standaard is ssh windows moet naar winrm
			# vw1Xeval.winrm.username = "IEUser"
			# vw1Xeval.winrm.password = "Passw0rd!"
			# vw1Xeval.winrm.host = "localhost"  	# The hostname or IP to connect to the WinRM service
			vw1Xeval.winrm.max_tries = 300 			# The maximum number of times to retry opening a shell after failure. This defaults to 20.
			vw1Xeval.winrm.retry_delay = 2 			# The amount of time to wait between retries and defaults to 2 seconds.
			#
			# ow10eval.vm.network "forwarded_port", guest: 3389, host: 3389, id: "rdp", auto_correct: true  [automatisch aan]
			# ow10eval.vm.network "forwarded_port", guest: 5985, host: 5985, id: "winrm", auto_correct: true [automatisch aan]
			#
			vw1Xeval.vm.network :forwarded_port, guest: 3389, host: 53389, auto_correct: true
			#	
			vw1Xeval.vm.provider "vmware_desktop" do |vw1Xevalsettings|
				#
				vw1Xevalsettings.gui = true
				vw1Xevalsettings.linked_clone = false
				#
				vw1Xevalsettings.cpus = "2"
				vw1Xevalsettings.memory = "4096"
				#
				vw1Xevalsettings.vmx["tools.syncTime"] = "TRUE"
				vw1Xevalsettings.vmx["displayName"] = "Vagrant-vw1#{i}eval"
				vw1Xevalsettings.vmx["annotation"] = "Windows 1#{i} Enterprise Evaluation |0D|0A |0D|0AUsername/Password = vagrant"
			end
			# vw1Xeval.vm.provision "shell", inline: <<-SHELL
			#
			# SHELL
			vw1Xeval.vm.provision "shell", privileged: "true", inline: <<-SHELL
				#
				#
				#
				#
			SHELL
		end
	end
	#
	#
	# 
	# =============================================== Oracle Virtuabox ====================================================
	#
	#
	# ####################################
	#              UBUNTU
	# ####################################
	#
	#
	#
	# gusztavvargadr Ubuntu Server 20.04 LTS
	# --------------------------------------
	#
	#
	# ====================================================================================
	# [vgru2004L] gusztavvargadr Ubuntu Server 20.04 LTS met 8GB RAM
	#
	# 20230729 VM start met foutmelding (oorzaak: onbekend) 
	#
	# ====================================================================================  
	#
	#
	config.vm.define "ogru2004L" do |ogru2004L|
		#
		ogru2004L.vm.box = "gusztavvargadr/ubuntu-server"
		ogru2004L.vm.box_check_update = true
		ogru2004L.vm.hostname = "Vagrant-ogru2004L"
		#
		# ogru2004L.vm.network "forwarded_port", guest: 80, host: 8888, host_ip: "127.0.0.1", protocol: "tcp", id: "webcntr01"	
		# Host-Only NIC toevoegen met fixed IP
		ogru2004L.vm.network "private_network", ip: "192.168.56.221", netmask: "255.255.255.0"
		#
		# ####################################################################	
		# https://developer.hashicorp.com/vagrant/docs/synced-folders/basic_usage
		ogru2004L.vm.synced_folder "C://Users//#{ENV['USERNAME']}", "/home/#{ENV['USERNAME']}"
		ogru2004L.vm.synced_folder "#{ENV['USERPROFILE']}//Downloads", "/home/vagrant/downloads"
		ogru2004L.vm.synced_folder "#{ENV['USERPROFILE']}//Documents", "/home/vagrant/documents"
		# ####################################################################	
		#
		# https://developer.hashicorp.com/vagrant/docs/providers/virtualbox
		ogru2004L.vm.provider "virtualbox" do |vb|
			vb.gui = true
			vb.cpus = "2"
			vb.memory = "8192"
			vb.linked_clone = false
			vb.name = "Vagrant-ogru2004L"
			vb.customize ["modifyvm", :id, "--vram", "128"]
			vb.customize ["modifyvm", :id, "--clipboard", "bidirectional"]
			vb.customize ["modifyvm", :id, "--draganddrop", "bidirectional"]
			vb.customize ["modifyvm", :id, "--description", "Ubuntu Server 20.04 LTS Gebruiker en Password: vagrant"]     
		end 
		ogru2004L.vm.provision "shell", inline: <<-SHELL
			# ===========================================================================================================   
			# Dit gedeelte wordt alleen uitgevoerd bij eerste start VM OF bij Provision parameter 
			# ===========================================================================================================
			#
			#
			#
			# 
		SHELL
		ogru2004L.vm.provision "shell", inline: $ubuntu_repo
		ogru2004L.vm.provision "shell", inline: $ubuntu_upgrade
		ogru2004L.vm.provision "shell", inline: $ubuntu_utils_install
	end 
	#
	#
	# Generic boxes
	# =============
	#
	#
	# Generic Ubuntu 22.04.02 LTS
	# https://wiki.ubuntu.com/Releases
	# --------------------------------
	#
	#
	# ====================================================================================
	# [ogu2204M] Generic Ubuntu 22.04.02 LTS met 2GB RAM (Small)
	# ====================================================================================
	#
	#
	config.vm.define "ogu2204S" do |ogu2204S|
		#
		ogu2204S.vm.box = "generic/ubuntu2204"
		ogu2204S.vm.box_check_update = true
		ogu2204S.vm.hostname = "Vagrant-oogu2204S"
		#
		# ogu2204S.vm.network "forwarded_port", guest: 80, host: 8888, host_ip: "127.0.0.1", protocol: "tcp", id: "webcntr01"	
		# Host-Only NIC toevoegen met fixed IP
		ogu2204S.vm.network "private_network", ip: "192.168.56.210", netmask: "255.255.255.0"
		ogu2204S.vm.synced_folder "C://Users//#{ENV['USERNAME']}", "/home/#{ENV['USERNAME']}"
		ogu2204S.vm.synced_folder "#{ENV['USERPROFILE']}//Downloads", "/home/vagrant/downloads"
		ogu2204S.vm.synced_folder "#{ENV['USERPROFILE']}//Documents", "/home/vagrant/documents"
		#
		ogu2204S.vm.post_up_message = "Start scripts in /home/vagrant voor verdere configuratie"
		#
		#
		# Installatie Docker-CE en Compose plugin
		# Eventueel pull images
		#
		# https://developer.hashicorp.com/vagrant/docs/provisioning/docker
		#
		# ogu2204S.vm.provision "docker" do |d|
		#	d.pull_images "hello-world"				# 	13.3 KB
		#	d.pull_images "alpine"					# 	7.33 MB
		#	d.pull_images "debian"					#	116 MB
		#	d.pull_images "registry"				# 	24 MB
		#	# d.pull_images "odoo"					#	1.68 GB
		#	d.pull_images "quay.io/minio/minio"		#	277 MB
		# end
		#
		# Installatie Ansible + uitvoeren playbook.yml
		#
		# ogu2204S.vm.provision "ansible_local" do |ansible|
		#	ansible.playbook = "playbook.yml"
		# end
		#		
		# https://developer.hashicorp.com/vagrant/docs/providers/virtualbox
		ogu2204S.vm.provider "virtualbox" do |ogu2204ssettings|
			#
			ogu2204ssettings.gui = true
			ogu2204ssettings.linked_clone = false
			#
			ogu2204ssettings.cpus = "2"
			ogu2204ssettings.memory = "2048"
			ogu2204ssettings.name = "Vagrant-ogu2204S"
			#
			ogu2204ssettings.customize ["modifyvm", :id, "--vram", "128"]
			ogu2204ssettings.customize ["modifyvm", :id, "--clipboard", "bidirectional"]
			ogu2204ssettings.customize ["modifyvm", :id, "--draganddrop", "bidirectional"]
			ogu2204ssettings.customize ["modifyvm", :id, "--description", "Ubuntu 22.04 LTS Gebruiker en Password: vagrant"] 
			#
		end 
		ogu2204S.vm.provision "shell", inline: <<-SHELL
			#
			#
			#
			#
			#
		SHELL
		ogu2204S.vm.provision "shell", inline: $ubuntu_repo
		ogu2204S.vm.provision "shell", inline: $ubuntu_upgrade   
		ogu2204S.vm.provision "shell", inline: $ubuntu_utils_install
		# Scripts die bij IEDERE start van de VM worden uitgevoerd
		ogu2204S.vm.provision "shell", run: "always", inline: <<-SHELL
			#
			# bijvoorbeeld sudo systemctl start nginx
			#
			#
		SHELL
		ogu2204S.vm.provision "shell", run: "always", inline: $ubuntu_repo
		ogu2204S.vm.provision "shell", run: "always", inline: $ubuntu_upgrade   
		ogu2204S.vm.provision "shell", run: "always", inline: $ubuntu_utils_install	

	end 
	#
	#
	# ====================================================================================
	# [ogu2204M] Generic Ubuntu 22.04.02 LTS met 4GB RAM (Medium)
	# ====================================================================================
	#
	#
	config.vm.define "ogu2204M" do |ogu2204M|
		#
		ogu2204M.vm.box = "generic/ubuntu2204"
		ogu2204M.vm.box_check_update = true
		ogu2204M.vm.hostname = "Vagrant-ogu2204M"
		#
		# ogu2204M.vm.network "forwarded_port", guest: 80, host: 8888, host_ip: "127.0.0.1", protocol: "tcp", id: "webcntr01"	
		# Host-Only NIC toevoegen met fixed IP
		ogu2204M.vm.network "private_network", ip: "192.168.56.210", netmask: "255.255.255.0"
		ogu2204M.vm.synced_folder "C://Users//#{ENV['USERNAME']}", "/home/#{ENV['USERNAME']}"
		ogu2204M.vm.synced_folder "#{ENV['USERPROFILE']}//Downloads", "/home/vagrant/downloads"
		ogu2204M.vm.synced_folder "#{ENV['USERPROFILE']}//Documents", "/home/vagrant/documents"
		#
		ogu2204M.vm.post_up_message = "Start scripts in /home/vagrant voor verdere configuratie"
		#
		#
		# Installatie Docker-CE en Compose plugin
		# Eventueel pull images
		#
		# https://developer.hashicorp.com/vagrant/docs/provisioning/docker
		#
		ogu2204M.vm.provision "docker" do |d|
			d.pull_images "hello-world"				# 	13.3 KB
			d.pull_images "alpine"					# 	7.33 MB
			d.pull_images "debian"					#	116 MB
			d.pull_images "registry"				# 	24 MB
			# d.pull_images "odoo"					#	1.68 GB
			d.pull_images "quay.io/minio/minio"		#	277 MB
		end
		#
		# Installatie Ansible + uitvoeren playbook.yml
		#
		# ogu2204M.vm.provision "ansible_local" do |ansible|
		#	ansible.playbook = "playbook.yml"
		# end
		#		
		# https://developer.hashicorp.com/vagrant/docs/providers/virtualbox
		ogu2204M.vm.provider "virtualbox" do |ogu2204msettings|
			#
			ogu2204msettings.gui = true
			ogu2204msettings.linked_clone = false
			#
			ogu2204msettings.cpus = "2"
			ogu2204msettings.memory = "4096"
			ogu2204msettings.name = "Vagrant-ogu2204M"
			#
			ogu2204msettings.customize ["modifyvm", :id, "--vram", "128"]
			ogu2204msettings.customize ["modifyvm", :id, "--clipboard", "bidirectional"]
			ogu2204msettings.customize ["modifyvm", :id, "--draganddrop", "bidirectional"]
			ogu2204msettings.customize ["modifyvm", :id, "--description", "Ubuntu 22.04 LTS Gebruiker en Password: vagrant"] 
			#
		end 
		# Scripts die bij eerste start of provision parameter worden uitgevoerd
		ogu2204M.vm.provision "shell", inline: <<-SHELL
			#
			#
			#
			#
		SHELL
		ogu2204M.vm.provision "shell", inline: $ubuntu_repo
		ogu2204M.vm.provision "shell", inline: $ubuntu_upgrade
		ogu2204M.vm.provision "shell", inline: $ubuntu_utils_install
		ogu2204M.vm.provision "shell", inline: $minikube_installatie
		ogu2204M.vm.provision "shell", inline: $minio_docker
		ogu2204M.vm.provision "shell", inline: $ansible_installatie
		# Scripts die bij IEDERE start van de VM worden uitgevoerd
		ogu2204M.vm.provision "shell", run: "always", inline: <<-SHELL
			#
			# bijvoorbeeld sudo systemctl start nginx
			#
			#
		SHELL
		ogu2204M.vm.provision "shell", run: "always", inline: $ubuntu_repo
		ogu2204M.vm.provision "shell", run: "always", inline: $ubuntu_upgrade
		ogu2204M.vm.provision "shell", run: "always", inline: $ubuntu_utils_install
	end 
	#
	#
	# ====================================================================================
	# [ogu2204L] Generic Ubuntu 22.04.02 LTS met 8GB RAM (Large)
	# ====================================================================================
	#
	#
	config.vm.define "ogu2204L" do |ogu2204L|
		#
		ogu2204L.vm.box = "generic/ubuntu2204"
		ogu2204L.vm.box_check_update = true
		ogu2204L.vm.hostname = "Vagrant-ogu2204L"
		#
		# ogu2204L.vm.network "forwarded_port", guest: 80, host: 8888, host_ip: "127.0.0.1", protocol: "tcp", id: "webcntr01"	
		# Host-Only NIC toevoegen met fixed IP
		ogu2204L.vm.network "private_network", ip: "192.168.56.210", netmask: "255.255.255.0"
		ogu2204L.vm.synced_folder "C://Users//#{ENV['USERNAME']}", "/home/#{ENV['USERNAME']}"
		ogu2204L.vm.synced_folder "#{ENV['USERPROFILE']}//Downloads", "/home/vagrant/downloads"
		ogu2204L.vm.synced_folder "#{ENV['USERPROFILE']}//Documents", "/home/vagrant/documents"
		#
		ogu2204L.vm.post_up_message = "Start scripts in /home/vagrant voor verdere configuratie"
		#
		#
		# Installatie Docker-CE en Compose plugin
		# Eventueel pull images
		#
		# https://developer.hashicorp.com/vagrant/docs/provisioning/docker
		#
		ogu2204L.vm.provision "docker" do |d|
			d.pull_images "hello-world"				# 	13.3 KB
			d.pull_images "alpine"					# 	7.33 MB
			d.pull_images "debian"					#	116 MB
			d.pull_images "registry"				# 	24 MB
			# d.pull_images "odoo"					#	1.68 GB
			d.pull_images "quay.io/minio/minio"		#	277 MB
		end
		#
		# Installatie Ansible + uitvoeren playbook.yml
		#
		# ogu2204L.vm.provision "ansible_local" do |ansible|
		#	ansible.playbook = "playbook.yml"
		# end
		#		
		# https://developer.hashicorp.com/vagrant/docs/providers/virtualbox
		ogu2204L.vm.provider "virtualbox" do |ogu2204lsettings|
			#
			ogu2204lsettings.gui = true
			ogu2204lsettings.linked_clone = false
			#
			ogu2204lsettings.cpus = "2"
			ogu2204lsettings.memory = "8192"
			ogu2204lsettings.name = "Vagrant-ogu2204L"
			#
			ogu2204lsettings.customize ["modifyvm", :id, "--vram", "128"]
			ogu2204lsettings.customize ["modifyvm", :id, "--clipboard", "bidirectional"]
			ogu2204lsettings.customize ["modifyvm", :id, "--draganddrop", "bidirectional"]
			ogu2204lsettings.customize ["modifyvm", :id, "--description", "Ubuntu 22.04 LTS Gebruiker en Password: vagrant"] 
			#
		end 
		# Scripts die bij eerste start of provision parameter worden uitgevoerd
		ogu2204L.vm.provision "shell", inline: <<-SHELL
			#
			# 
			#
			#
		SHELL
		ogu2204L.vm.provision "shell", inline: $ubuntu_repo
		ogu2204L.vm.provision "shell", inline: $ubuntu_upgrade
		ogu2204L.vm.provision "shell", inline: $ubuntu_utils_install
		ogu2204L.vm.provision "shell", inline: $minikube_installatie
		ogu2204L.vm.provision "shell", inline: $minio_docker
		ogu2204L.vm.provision "shell", inline: $ansible_installatie 
		ogu2204L.vm.provision "shell", inline: $minio_installatie
		# Scripts die bij eerste start of provision parameter worden uitgevoerd
		ogu2204L.vm.provision "shell", run: "always", inline: <<-SHELL
			#
			# bijvoorbeeld sudo systemctl start nginx
			#
			#
		SHELL
		ogu2204L.vm.provision "shell", run: "always", inline: $ubuntu_repo
		ogu2204L.vm.provision "shell", run: "always", inline: $ubuntu_upgrade
		ogu2204L.vm.provision "shell", run: "always", inline: $ubuntu_utils_install
	end 
	#
	#
	# Generic Ubuntu 22.10 (non-LTS)
	# ------------------------------
	#
	#
	# ====================================================================================
	# [ogu2210S] Generic Ubuntu 22.10 met 2GB RAM (SMALL)
	# ====================================================================================
	#
	#
	config.vm.define "ogu2210S" do |ogu2210S|
		#
		ogu2210S.vm.box = "generic/ubuntu2210"
		ogu2210S.vm.box_check_update = true
		ogu2210S.vm.hostname = "Vagrant-ogu2210S"
		#
		# ogu2210S.vm.network "forwarded_port", guest: 80, host: 8888, host_ip: "127.0.0.1", protocol: "tcp", id: "webcntr01"	
		# Host-Only NIC toevoegen met fixed IP
		ogu2210S.vm.network "private_network", ip: "192.168.56.201", netmask: "255.255.255.0"
		#
		# ####################################################################	
		# https://developer.hashicorp.com/vagrant/docs/synced-folders/basic_usage
		ogu2210S.vm.synced_folder "C://Users//#{ENV['USERNAME']}", "/home/#{ENV['USERNAME']}"
		ogu2210S.vm.synced_folder "#{ENV['USERPROFILE']}//Downloads", "/home/vagrant/downloads"
		ogu2210S.vm.synced_folder "#{ENV['USERPROFILE']}//Documents", "/home/vagrant/documents"
		# ####################################################################	
		#
		# https://developer.hashicorp.com/vagrant/docs/providers/virtualbox
		ogu2210S.vm.provider "virtualbox" do |ogu2210ssettings|
			#
			ogu2210ssettings.gui = true
			ogu2210ssettings.linked_clone = false
			#
			ogu2210ssettings.cpus = "2"
			ogu2210ssettings.memory = "2048"
			ogu2210ssettings.name = "Vagrant-ogu2210S"
			#
			ogu2210ssettings.customize ["modifyvm", :id, "--vram", "128"]
			ogu2210ssettings.customize ["modifyvm", :id, "--clipboard", "bidirectional"]
			ogu2210ssettings.customize ["modifyvm", :id, "--draganddrop", "bidirectional"]
			ogu2210ssettings.customize ["modifyvm", :id, "--description", "Ubuntu 22.10 LTS Gebruiker en Password: vagrant"] 
			#
		end 
		# Scripts die bij eerste start of provision parameter worden uitgevoerd
		ogu2210S.vm.provision "shell", inline: <<-SHELL
			#
			#
			#
			#
			#
		SHELL
		ogu2210S.vm.provision "shell", inline: $ubuntu_repo
		ogu2210S.vm.provision "shell", inline: $ubuntu_upgrade   
		ogu2210S.vm.provision "shell", inline: $ubuntu_utils_install
		# Scripts die bij IEDERE start van de VM worden uitgevoerd
		ogu2210S.vm.provision "shell", run: "always", inline: <<-SHELL
			#
			# bijvoorbeeld sudo systemctl start nginx
			#
			#
		SHELL
		ogu2210S.vm.provision "shell", run: "always", inline: $ubuntu_repo
		ogu2210S.vm.provision "shell", run: "always", inline: $ubuntu_upgrade   
		ogu2210S.vm.provision "shell", run: "always", inline: $ubuntu_utils_install	
	end 
	#  
	#
	# ====================================================================================  
	# [ogu2210M] Generic Ubuntu 22.10 met 4GB RAM (Medium)
	# ====================================================================================
	#
	#
	config.vm.define "ogu2210M" do |ogu2210M|
		#
		ogu2210M.vm.box = "generic/ubuntu2210"
		ogu2210M.vm.box_check_update = true
		ogu2210M.vm.hostname = "Vagrant-ogu2210M"
		#
		# ogu2210M.vm.network "forwarded_port", guest: 80, host: 8888, host_ip: "127.0.0.1", protocol: "tcp", id: "webcntr01"	
		# Host-Only NIC toevoegen met fixed IP
		ogu2210M.vm.network "private_network", ip: "192.168.56.202", netmask: "255.255.255.0"
		#
		# ####################################################################	
		# https://developer.hashicorp.com/vagrant/docs/synced-folders/basic_usage
		ogu2210M.vm.synced_folder "C://Users//#{ENV['USERNAME']}", "/home/#{ENV['USERNAME']}"
		ogu2210M.vm.synced_folder "#{ENV['USERPROFILE']}//Downloads", "/home/vagrant/downloads"
		ogu2210M.vm.synced_folder "#{ENV['USERPROFILE']}//Documents", "/home/vagrant/documents"
		# ####################################################################			
		#
		ogu2210M.vm.post_up_message = "Start scripts in /home/vagrant voor verdere configuratie"
		#
		#
		# Installatie Docker-CE en Compose plugin
		# Eventueel pull images
		#
		# https://developer.hashicorp.com/vagrant/docs/provisioning/docker
		#
		ogu2210M.vm.provision "docker" do |d|
			d.pull_images "hello-world"				# 	13.3 KB
			d.pull_images "alpine"					# 	7.33 MB
			d.pull_images "debian"					#	116 MB
			d.pull_images "registry"				# 	24 MB
			# d.pull_images "odoo"					#	1.68 GB
			d.pull_images "quay.io/minio/minio"		#	277 MB
		end
		#
		# Installatie Ansible + uitvoeren playbook.yml
		#
		# ogu2210M.vm.provision "ansible_local" do |ansible|
		#	ansible.playbook = "playbook.yml"
		# end
		#
		# https://developer.hashicorp.com/vagrant/docs/providers/virtualbox
		ogu2210M.vm.provider "virtualbox" do |ogu2210msettings|
			#
			ogu2210msettings.gui = true
			ogu2210msettings.linked_clone = false
			#
			ogu2210msettings.cpus = "2"
			ogu2210msettings.memory = "4096"
			ogu2210msettings.name = "Vagrant-ogu2210M"
			#
			ogu2210msettings.customize ["modifyvm", :id, "--vram", "128"]
			ogu2210msettings.customize ["modifyvm", :id, "--clipboard", "bidirectional"]
			ogu2210msettings.customize ["modifyvm", :id, "--draganddrop", "bidirectional"]
			ogu2210msettings.customize ["modifyvm", :id, "--description", "Ubuntu 22.10 LTS Gebruiker en Password: vagrant"] 
			#
		end 
		# Scripts die bij eerste start of provision parameter worden uitgevoerd
		ogu2210M.vm.provision "shell", inline: <<-SHELL
			#
			#
			#
			#
		SHELL
		ogu2210M.vm.provision "shell", inline: $ubuntu_repo
		ogu2210M.vm.provision "shell", inline: $ubuntu_upgrade
		ogu2210M.vm.provision "shell", inline: $ubuntu_utils_install
		ogu2210M.vm.provision "shell", inline: $minikube_installatie
		ogu2210M.vm.provision "shell", inline: $minio_docker
		ogu2210M.vm.provision "shell", inline: $ansible_installatie
		# Scripts die bij IEDERE start van de VM worden uitgevoerd
		ogu2210M.vm.provision "shell", run: "always", inline: <<-SHELL
			#
			# bijvoorbeeld sudo systemctl start nginx
			#
			#
		SHELL
		ogu2210M.vm.provision "shell", run: "always", inline: $ubuntu_repo
		ogu2210M.vm.provision "shell", run: "always", inline: $ubuntu_upgrade
		ogu2210M.vm.provision "shell", run: "always", inline: $ubuntu_utils_install
	end 
	#
	#
	# ====================================================================================  
	# [ogu2210L] Generic Ubuntu 22.10 met 8GB RAM (LARGE)
	# ====================================================================================  
	#
	#
	config.vm.define "ogu2210L" do |ogu2210L|
		#
		ogu2210L.vm.box = "generic/ubuntu2210"
		ogu2210L.vm.box_check_update = true
		ogu2210L.vm.hostname = "Vagrant-ogu2210L"
		#
		# ogu2210L.vm.network "forwarded_port", guest: 80, host: 8888, host_ip: "127.0.0.1", protocol: "tcp", id: "webcntr01"	
		# Host-Only NIC toevoegen met fixed IP
		ogu2210L.vm.network "private_network", ip: "192.168.56.203", netmask: "255.255.255.0"
		#
		# ####################################################################	
		# https://developer.hashicorp.com/vagrant/docs/synced-folders/basic_usage
		ogu2210L.vm.synced_folder "C://Users//#{ENV['USERNAME']}", "/home/#{ENV['USERNAME']}"
		ogu2210L.vm.synced_folder "#{ENV['USERPROFILE']}//Downloads", "/home/vagrant/downloads"
		ogu2210L.vm.synced_folder "#{ENV['USERPROFILE']}//Documents", "/home/vagrant/documents"
		# ####################################################################	
		#
		ogu2210L.vm.post_up_message = "Start scripts in /home/vagrant voor verdere configuratie"
		#
		# Installatie Docker-CE en Compose plugin
		# Eventueel pull images
		#
		# https://developer.hashicorp.com/vagrant/docs/provisioning/docker
		#
		ogu2210L.vm.provision "docker" do |d|
			d.pull_images "hello-world"				# 	13.3 KB
			d.pull_images "alpine"					# 	7.33 MB
			d.pull_images "debian"					#	116 MB
			d.pull_images "registry"				# 	24 MB
			# d.pull_images "odoo"					#	1.68 GB
			d.pull_images "quay.io/minio/minio"		#	277 MB
		end
		#
		# Installatie Ansible + uitvoeren playbook.yml
		#
		# ogu2210L.vm.provision "ansible_local" do |ansible|
		#	ansible.playbook = "playbook.yml"
		# end
		#
		# https://developer.hashicorp.com/vagrant/docs/providers/virtualbox
		ogu2210L.vm.provider "virtualbox" do |ogu2210lsettings|
			#
			ogu2210lsettings.gui = true
			ogu2210lsettings.linked_clone = false
			#
			ogu2210lsettings.cpus = "2"
			ogu2210lsettings.memory = "8192"
			ogu2210lsettings.name = "Vagrant-ogu2210L"
			#
			ogu2210lsettings.customize ["modifyvm", :id, "--vram", "128"]
			ogu2210lsettings.customize ["modifyvm", :id, "--clipboard", "bidirectional"]
			ogu2210lsettings.customize ["modifyvm", :id, "--draganddrop", "bidirectional"]
			ogu2210lsettings.customize ["modifyvm", :id, "--description", "Ubuntu 22.10 LTS Gebruiker en Password: vagrant"] 
			#
		end 
		# Scripts die bij eerste start of provision parameter worden uitgevoerd
		ogu2210L.vm.provision "shell", inline: <<-SHELL
			#
			# 
			#
			#
		SHELL
		ogu2210L.vm.provision "shell", inline: $ubuntu_repo
		ogu2210L.vm.provision "shell", inline: $ubuntu_upgrade
		ogu2210L.vm.provision "shell", inline: $ubuntu_utils_install
		ogu2210L.vm.provision "shell", inline: $minikube_installatie
		ogu2210L.vm.provision "shell", inline: $minio_docker
		ogu2210L.vm.provision "shell", inline: $ansible_installatie 
		ogu2210L.vm.provision "shell", inline: $minio_installatie
		# Scripts die bij eerste start of provision parameter worden uitgevoerd
		ogu2210L.vm.provision "shell", run: "always", inline: <<-SHELL
			#
			# bijvoorbeeld sudo systemctl start nginx
			#
			#
		SHELL
		ogu2210L.vm.provision "shell", run: "always", inline: $ubuntu_repo
		ogu2210L.vm.provision "shell", run: "always", inline: $ubuntu_upgrade
		ogu2210L.vm.provision "shell", run: "always", inline: $ubuntu_utils_install
	end 
	#
	#
	# Alvistack Ubuntu 22.10 (non-LTS)
	# --------------------------------
	#
	#
	# ====================================================================================
	# [oau2210M] maroskukan Ubuntu 22.10 met 4GB RAM
	# ====================================================================================  
	#
	#
	config.vm.define "oau2210M" do |oau2210M|
		#
		oau2210M.vm.box = "alvistack/ubuntu-22.10"
		oau2210M.vm.box_check_update = true
		oau2210M.vm.hostname = "Vagrant-oau2210M"
		#
		# oau2210M.vm.network "forwarded_port", guest: 80, host: 8888, host_ip: "127.0.0.1", protocol: "tcp", id: "webcntr01"	
		# Host-Only NIC toevoegen met fixed IP
		oau2210M.vm.network "private_network", ip: "192.168.56.220", netmask: "255.255.255.0"
		#
		# ####################################################################	
		# https://developer.hashicorp.com/vagrant/docs/synced-folders/basic_usage
		oau2210M.vm.synced_folder "C://Users//#{ENV['USERNAME']}", "/home/#{ENV['USERNAME']}"
		oau2210M.vm.synced_folder "#{ENV['USERPROFILE']}//Downloads", "/home/vagrant/downloads"
		oau2210M.vm.synced_folder "#{ENV['USERPROFILE']}//Documents", "/home/vagrant/documents"
		# ####################################################################			
		#
		oau2210M.vm.post_up_message = "Start scripts in /home/vagrant voor verdere configuratie"
		#
		#
		# Installatie Docker-CE en Compose plugin
		# Eventueel pull images
		#
		# https://developer.hashicorp.com/vagrant/docs/provisioning/docker
		#
		oau2210M.vm.provision "docker" do |d|
			d.pull_images "hello-world"				# 	13.3 KB
			d.pull_images "alpine"					# 	7.33 MB
			d.pull_images "debian"					#	116 MB
			d.pull_images "registry"				# 	24 MB
			# d.pull_images "odoo"					#	1.68 GB
			d.pull_images "quay.io/minio/minio"		#	277 MB
		end
		#
		# Installatie Ansible + uitvoeren playbook.yml
		#
		# oau2210M.vm.provision "ansible_local" do |ansible|
		#	ansible.playbook = "playbook.yml"
		# end
		#		
		# https://developer.hashicorp.com/vagrant/docs/providers/virtualbox
		oau2210M.vm.provider "virtualbox" do |vb|
			#
			vb.gui = true
			vb.linked_clone = false
			#
			vb.cpus = "2"
			vb.memory = "4096"
			vb.name = "Vagrant-oau2210M"
			#
			vb.customize ["modifyvm", :id, "--vram", "128"]
			vb.customize ["modifyvm", :id, "--clipboard", "bidirectional"]
			vb.customize ["modifyvm", :id, "--draganddrop", "bidirectional"]
			vb.customize ["modifyvm", :id, "--description", "Ubuntu 22.04 LTS Gebruiker en Password: vagrant"] 
		end 
		# Scripts die bij eerste start of provision parameter worden uitgevoerd
		oau2210M.vm.provision "shell", inline: <<-SHELL
			#
			#
			#
			#
		SHELL
		oau2210M.vm.provision "shell", inline: $ubuntu_repo
		oau2210M.vm.provision "shell", inline: $ubuntu_upgrade
		oau2210M.vm.provision "shell", inline: $ubuntu_utils_install
		oau2210M.vm.provision "shell", inline: $minikube_installatie
		oau2210M.vm.provision "shell", inline: $minio_docker
		oau2210M.vm.provision "shell", inline: $ansible_installatie
		# Scripts die bij IEDERE start van de VM worden uitgevoerd
		oau2210M.vm.provision "shell", run: "always", inline: <<-SHELL
			#
			# bijvoorbeeld sudo systemctl start nginx
			#
			#
		SHELL
		oau2210M.vm.provision "shell", run: "always", inline: $ubuntu_repo
		oau2210M.vm.provision "shell", run: "always", inline: $ubuntu_upgrade
		oau2210M.vm.provision "shell", run: "always", inline: $ubuntu_utils_install	
	end 
	#
	#
	#
	# #########################################
	# ###             Windows               ###
	# #########################################
	# 
	# 
	# [ow10eval] Windows 10 Enterprise 19045.3208 Evaluation 90-days
	#
	#
	# Box gusztavvargadr/windows-10
	# SSH en WinRM
	# https://app.vagrantup.com/gusztavvargadr/boxes/windows-10-22h2-enterprise/versions/2202.0.2307/
	#
	#
	config.vm.define "ow10eval" do |ow10eval|
		#
		ow10eval.vm.box = "gusztavvargadr/windows-10" 
		ow10eval.vm.box_check_update = true
		#
		ow10eval.vm.hostname = "Vagrant-ow10eval"
		ow10eval.vm.guest = :windows
		ow10eval.vm.boot_timeout = 18000
		# 
		ow10eval.winssh.shell = "cmd" 		# The shell to use when executing SSH commands from Vagrant. By default this is powershell. Valid values are "cmd" or "powershell".
		#
		# WinRM
		#
		ow10eval.vm.communicator = "winrm" 	# standaard is ssh windows moet naar winrm
		# config.winrm.username = "IEUser"
		# config.winrm.password = "Passw0rd!"
		# ow10eval.winrm.host = "localhost"  	# The hostname or IP to connect to the WinRM service
		ow10eval.winrm.max_tries = 300 		# The maximum number of times to retry opening a shell after failure. This defaults to 20.
		ow10eval.winrm.retry_delay = 2 		# The amount of time to wait between retries and defaults to 2 seconds.
		#
		# ow10eval.vm.network "forwarded_port", guest: 3389, host: 3389, id: "rdp", auto_correct: true  [automatisch aan]
		# ow10eval.vm.network "forwarded_port", guest: 5985, host: 5985, id: "winrm", auto_correct: true [automatisch aan]
		#
		ow10eval.vm.network :forwarded_port, guest: 3389, host: 53389, auto_correct: true
		#
		# https://developer.hashicorp.com/vagrant/docs/providers/virtualbox
		ow10eval.vm.provider "virtualbox" do |vb|
			#
			vb.gui = true
			vb.linked_clone = false
			#
			vb.cpus = "2"
			vb.memory = "4096"
			vb.name = "Vagrant-ow10eval"
			#
			vb.customize ["modifyvm", :id, "--vram", "128"]
			vb.customize ["modifyvm", :id, "--clipboard", "bidirectional"]
			vb.customize ["modifyvm", :id, "--draganddrop", "bidirectional"]
			vb.customize ["modifyvm", :id, "--description", "Ubuntu Server 20.04 LTS Gebruiker en Password: vagrant"]     
		end
		#
		# ow10eval.vm.provision "shell", inline: <<-SHELL 
		#
		# SHELL
		#
		# ow10eval.vm.provision "shell", privileged: "true", inline: <<-SHELL
		#
		# SHELL
	end
	#
	# 
	# [ow11eval] Windows 11 Enterprise EVAL
	#
	# Naslag VMware omgevingen https://developer.hashicorp.com/vagrant/docs/providers/vmware
	#
	config.vm.define "ow11eval" do |ow11eval|
		ow11eval.vm.box = "gusztavvargadr/windows-11"
		ow11eval.vm.box_check_update = true
		ow11eval.vm.hostname = "ow11eval"
		# # ow11eval.vm.guest = :windows
		# ow11eval.vm.boot_timeout = 3600
		# # ow11eval.vm.communicator = "winrm"
		# # ow11eval.vm.network "forwarded_port", guest: 3389, host: 3389, id: "rdp", auto_correct: true  [automatisch aan]
		# # ow11eval.vm.network "forwarded_port", guest: 5985, host: 5985, id: "winrm", auto_correct: true [automatisch aan]
		# # ow11eval.winrm.host = "localhost"
		# https://developer.hashicorp.com/vagrant/docs/providers/virtualbox
		ow11eval.vm.provider "virtualbox" do |vb|
			vb.gui = true
			vb.cpus = "2"
			vb.memory = "4096"
			vb.linked_clone = false
			vb.customize ["modifyvm", :id, "--vram", "128"]
			# vb.customize ["modifyvm", :id, "--accelerate3d", "on"]
			vb.customize ["modifyvm", :id, "--clipboard", "bidirectional"]
			vb.customize ["modifyvm", :id, "--draganddrop", "bidirectional"]
		end
		# ow11eval.vm.provision "shell", inline: <<-SHELL 
		ow11eval.vm.provision "shell", privileged: "true", inline: <<-SHELL
			echo $ErrorActionPreference = 'Stop' >ps-winget.ps1
			echo $r = Invoke-RestMethod -Method Get -Uri https://api.github.com/repos/microsoft/winget-cli/releases/latest >>ps-winget.ps1
			echo $r.assets | ? { $_.name -match "\.msixbundle$" } | % { >>ps-winget.ps1
			echo     $downloadedFile = Join-Path $env:Temp $_.name >>ps-winget.ps1
			echo     if (Test-Path $downloadedFile) { >>ps-winget.ps1
			echo         Remove-Item $downloadedFile -Force >>ps-winget.ps1
			echo  } >>ps-winget.ps1
			REM powershell -ExecutionPolicy Unrestricted 
			REM powershell -file ps-winget.ps1
		SHELL
	end
	#
	#
	# [Einde BOXES]
	#
	#
end